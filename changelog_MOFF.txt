From v1.06.2 of MOFF:
====================

Created a branch named discretepol to introduce discretization at the individual
polarization and antenna level

In antenna_array.py, 

(*) Added a new member function discretize() under class PolInfo that can
discretize the electric field timeseries and/or spectrum
(*) Made a minor change to docstring of member function temporal_F() of class 
PolInfo
(*) Added a new member function discretize() under class Antenna that can
discretize the electric field timeseries and/or spectrum and also the aperture
illumination

---------------------------------------------------------------------------------
From v1.06.1 of MOFF:
====================

Previous changelog should have mentioned variation from v1.06.1 instead of v1.06
above. Hence just amending the previous commit.

Created a branch lookup_patch to adjust the module to use the newer version of 
the module lookup_operations espcially in switching the usage from lookup() to
lookup_1NN()

In antenna_array.py,

(*) Replaced the calls to lookup() with lookup_1NN() and tested certain cases
with the MWA test script

---------------------------------------------------------------------------------
From v1.06 of MOFF:
==================

In antenna_array.py,

(*) Changed all occurrences of variable maxNN to maxmatch to indicate it denotes
maximum number of unique matches between the input locations and lookup table 
and not the number of nearest neighbors for each input location that needs to be
assigned. This is in line with the changes made in lookup_operations.py to
lookup() from v1.08. Changed docstring accordingly.

---------------------------------------------------------------------------------
From v1.05 of MOFF:
==================

In antenna_array.py,

(*) Although keyword maxNN was added in the previous version as an input to
member function grid_convolve(), while passing to lookup operation, it was 
hard-coded to maxNN=1. Now changed it to maxNN=maxNN so that the appropriate
value of maxNN may be passed.

---------------------------------------------------------------------------------
From v1.04 of MOFF:
==================

In antenna_array.py,

(*) Added keyword input maxNN to member functions grid_convolve() of class 
AntennaArray, and as one of the keys in the update dictionary inside update()
member function also of class AntennaArray

---------------------------------------------------------------------------------
From v1.03 of MOFF:
==================

In lookup_operations.py,

(*) in function lookup(), distNN was not initialized when remove_oob is False.
Now it is initialized.

Moved module lookup_operations.py from MOFF to general repository

In antenna_array.py,

(*) Normalized the holographic images by the sum of weights in each frequency
slice of the grid illumination pattern
(*) In member function temporal_F() of class PolInfo, use keyword inverse=False
to make it clear it is not inverse fourier transform
(*) Added a new member function delay_compensation() to class PolInfo that 
compensates for uncorrected delays by applying a phase correction to the
fourier transformed electric fields.
(*) Added input parameters delaydict_P1 and delaydict_P2 to member function
update() of class PolInfo and also a call to member function delay_compensation()
if delay compensation is to be applied. Updated docstring accordingly. 
(*) Added input parameters delaydict_P1 and delaydict_P2 to member function
update() of class Antenna and also in the call to member function update() of
object pol belonging to class PolInfo if delay compensation is to be applied.
Updated docstring accordingly. 
(*) Added input parameters delaydict_P1 and delaydict_P2 to member function
update() of class AntennaArray and also in the call to member function update() 
of object belonging to class Antenna if delay compensation is to be applied.
Updated docstring accordingly. 
(*) Added docstring to member function antenna_positions() of class 
AntennaArray which wasn't included earlier.
(*) Added to docstring of class AntennaArray the presence of member function
antenna_positions() which wasn't included earlier.
(*) In member function update() of class AntennaArray, included defaults (to 
None) for dictionary containing delay information. 
(*) In member function update() of class AntennaArray, earlier the attributes of
only the individual antenna instances were getting updated. Now modified it to
also update some of the attributes of AntennaArray instance such as timestamp.
This is done by making the input parameter 'updates' a dictionary with primary 
keys being 'antenna_array' and 'antenna'. The former is a dictionary consisting 
of updates to AntennaArray instance while the latter is a dictionary consisting
of a list of dictionaries one for each antenna instance to be updated. Changed
docstring accordingly.

---------------------------------------------------------------------------------
from v1.02 of MOFF:
==================

In antenna_array.py,

(*) Imported the lookup_operations module to handle lookup operations
(*) Modified input parameters to member function update() in class Antenna so 
that weight positions and weights can be passed as input parameters directly or
indirectly through a lookup table. The data type of input parameters wtsinfo_P1 
and wtsinfo_P2 have been changed from a list of tuples to a list of dictionaries.
(*) Changed docstring in member function update() of class AntennaArray to 
indicate that wtsinfo_P1 and wtsinfo_P2 are list of dictionaries rather than a
list of tuples as used before.
(*) Added a boolean input parameter named normalize in member function 
grid_convolve() of class AntennaArray, which if set to True will normalize the
gridded weights such that the sum of the gridded weights for each antenna will
equal unity. Otherwise, no such normalization is performed. Changed docstring of
member function grid_convolve() of class AntennaArray accordingly. 
(*) In member function update() of class AntennaArray, the dictionary consisting
of updates now includes a keyword named norm_wts which is a Boolean value that
indicates if normalizing of grid weights is to be performed inside
grid_convolve() when grid_action keyword is set when action keyword is set to 
'add' or 'modify'. Changed docstring of member function update() of class 
AntennaArray accordingly.
(*) Explicitly specified in all the relevant docstrings that wtspos, wtspos_P1,
and wtspos_P2 both as variables and attributes of class Antenna are in units of
number of wavelengths and remove any ambiguity that they could be in units of
physical distance
(*) Added an input parameter named method to member function grid_convolve() of
class AntennaArray which indicates the gridding method to be used. Accordingly
changed use of method from being restricted to 'CS' to whatever value is given
in method
(*) Added an input parameter named distNN to member function grid_convolve() of
class AntennaArray which indicates the upper bound to distance while searching
for nearest neighbours.
(*) Modified grid_convolve() member function of class AntennaArray to use 
nearest neaighbor or other interpolation strategies in applying the antenna 
weights to the grid. The nearest neighbor gridding makes use of the lookup
modules while other algorithms makes use of the gridding modules
(*) In member function update() of class AntennaArray, modified the call to its
member function grid_convolve() such that gridding method and distance upper
bound in case of nearest neighbor gridding are also passed.

In sim_observe.py,

(*) Made minor changes to docstrings in the description of input parameter antpos
in various functions.
(*) Modified stochastic_E_spectrum() to take advantage of numpy array
broadcasting
(*) Added a new input parameter ref_point to stochastic_E_spectrum() which 
denotes the phase reference on the sky
(*) Added a new input parameter ref_point to stochastic_E_timeseries() which 
denotes the phase reference on the sky and internal calling sequence to function
stochastic_E_spectrum() updated accordingly
(*) Inconsequentially changed internal variable names in both functions 
stochastic_E_spectrum() and stochastic_E_timeseries() to be consistent with
the implementation of numpy array broadcasting rules
(*) Added a new input parameter ref_point to monochromatic_E_spectrum() which 
denotes the phase reference on the sky
(*) Added a new input parameter ref_point to monochromatic_E_timeseries() which 
denotes the phase reference on the sky and internal calling sequence to function
monochromatic_E_spectrum() updated accordingly
(*) Added a new input parameter tshift (boolean) to stochastic_E_timeseries()
to indicate if phasing of the antennas is to be achieved by shifting of time bins
for different antennas. If not set to True, the phasing is achieved directly in
the frequency domain and transformed to time domain. If set to True, the time
series for each antenna is shifted by integral number of time bins that achieves
the closest amount of phase difference and the residual delay is returned which
can be applied later to the data in frequency domain.
(*) Body of stochastic_E_timeseries() modified to apply the phase reference 
either directly in the frequency domain or in time domain through delay bin
shifts and residual delay phase in frequency domain.
(*) Dictionary output of stochastic_E_timeseries() now contains a key named
'tres' which consists of residual delays (non-integral part) one per antenna.
(*) Dictionary output of stochastic_E_timeseries() now contains a key named
'tshift which consists of integral number of bins by which the the original 
timeseries of antennas have been shifted.
(*) In function stochastic_E_spectrum(), changed the sign convention of the 
complex exponent arising out of k(.)r such that an antenna at a negative 
location receives the signal after a lag while an antenna with a positive
location receives the signal in advance.
(*) In function monochromatic_E_spectrum(), changed the sign convention of the 
complex exponent arising out of k(.)r such that an antenna at a negative 
location receives the signal after a lag while an antenna with a positive
location receives the signal in advance.
(*) Corresponding to the change in sign convention, the member function imagr()
in class Image now uses FFT and FFT shifts instead of IFFT and IFFT shifts
to compute the images
(*) In monochromatic_E_spectrum(), added random phases from sources
(*) In monochromatic_E_spectrum(), modified few lines to take advantage of numpy
array broadcasting

(*) Created a new module named lookup_operations.py

In lookup_operations.py,

(*) Created functions gen_lookup(), read_lookup(), and lookup() to generate,
read, and perform nearest neighbour lookup respectively.

---------------------------------------------------------------------------------
from v1.01 of MOFF:
==================

In sim_observe.py,

(*) Created new function monochromatic_E_spectrum() and
monochromatic_E_timeseries() which produce a monochromatic electric field
spectrum and time-series respectively.

--------------------------------------------------------------------------------
from v1.0 of MOFF:
=================

In antenna_array.py, 

(*) Moved functions XC() and spectax() to the DSP module. Changed the module
prefix in the calling sequence accordingly
(*) Added attribute timestamp to Class AntennaArray
(*) Added method antenna_positions() in AntennaArray class to return a
dictionary containing antenna labels and a corresponding 3-column numpy array
of antenna locations either in random or sorted order based on the antenna
labels.
(*) Added a save() method in AntennaArray class to write contents of the
instance to disk
(*) Added a save() method in Antenna class to write contents of the instance
to disk
(*) In class method temporal_F() of class PolInfo, the time sequence is 
doubled in length by zero padding before the channelization using FFT
(*) In class method channels() of class Antenna, the frequency channels are now
computed with twice the length of time sequence and same time resolution to be
consistent with changes in temporal_F() method in class PolInfo.
(*) Added a new class Image to handle imaging data and associated operations.
(*) Class Image currently has the following member functions: __init__(), 
imagr() and save().
(*) __init__() of class Image can take in an instance of AntennaArray class or
a FITS file written by the save() method of AntennaArray class
(*) imagr() of class Image performs imaging operations on the antenna array 
grid information to produce a holographic image (complex, voltage)
(*) save() of class Image writes the image information to a FITS file on disk

Created a new module named sim_observe. 

(*) It consists of two functions, namely, stochastic_E_spectrum() and
stochastic_E_timeseries(). 
(*) stochastic_E_spectrum() computes random electric field spectra. Docstring
included.
(*) stochastic_E_timeseries() computes random electric field timeseries.
Docstring included.


--------------------------------------------------------------------------------
from v1.2 of python-trials:
==========================

In antenna_array.py, 

(*) member function F() replaced with temporal_F() in class
PolInfo does not return any values. Accordingly changed the calls to member
function in __init__(), and update().
(*) Renamed attribute pos in class Antenna, AntennaPair and AntennaArray to
location
(*) Introduced rotation matrix to convert from an individual antenna frame to 
local ENU coordinates in __init__() and update() in Antenna class
(*) Updated the call in Antenna class member function update() to PolInfo member
function update() 
(*) Added attribute 'latitude' to Antenna class
(*) Changed X and Y polarizations to P1 and P2 respectively to avoind confusion 
with x and y spatial coordinates
(*) Changed __init__() in PolInfo to different defaults
(*) Changed __init__() in Antenna to different defaults and added some data 
validation. 
(*) Added save method to class Antenna
(*) Changed gridding weights input type to Antenna class member function update.
(*) renamed spaxis() to spectax() and changed default of shift from True to 
False
(*) Making all time-series FFT shifted to have frequencies in sorted order by
setting shift=True
(*) Antenna class update() member function provides scaling, no scaling or 
explicit options for updating gridding information along frequency channels.
(*) AntennaArray class update() member function can add, remove, or update. The
updates should be provided as a list of dictionaries which will be passed to the
update() member function of individual antenna instances. 
(*) Verbose functionality added to update() member functions in Antenna and 
AntennaArray classes
(*) Added blc and trc attributes to Antenna class for antenna's grid occupation
in __init__() and their estimates in update() member function
(*) Renamed attributes ants_xmin_P1, grid_xmin_P1, etc. in terms of blc and trc
in AntennaArray class
(*) Added grid attributes for both polarizations
(*) Added polarization inputs to gridding methods
(*) Gridding occurs only based on unflagged antennas
(*) Information about individual antenna's influence on grid is stored in the 
form of a dictionary in the antenna's attributes gridinfo_P1 and gridinfo_P2
(*) Incremental gridding features added for addition, removal, and 
modifications of antennas
(*) Renamed function parameter 'spacing' in grid() to 'uvspacing'
(*) Added docstrings for all the functions and class member functions
(*) save() member functions in classes Antenna and AntennaArray need to be 
developed. 

Added a python script MOFF_testing.py for preliminary testing of modules 
developed for MOFF
