From a6869ee (package):
======================

In epic/data_interface.py,

(*) Update save() and __init__() member functions to save and load
cable delays to/from external files

From d62f3d6 (package):
======================

In epic/data_interface.py,

(*) Update __init__() and load_parms() member functions of class
DataContainer to store cable delays.
(*) Update load_parms() member function of class DataContainer to
store Ef and Et using getattr() instead of setattr()

From 6b6ed5e (package):
======================

In epic/data_interface.py,

(*) Check for datatype variable for both Et and Ef in __init__()
member function of class DataContainer.

In epic/examples/ioparms/LWA_TBN_input_file_parameters.yaml,

(*) Add more input parameters for instrument and observational info

From 9aa659a (package):
======================

(*) Add epic/examples/ioparms/LWA_TBN_input_file_parameters.yaml to
repo
(*) Add scripts/convert_LWA_TBN_data_to_EPIC_format.py to repo
(*) Minor updates to
epic/examples/ioparms/MWAVCS_input_file_parameters.yaml

From 04dbbff (package):
======================

(*) Add scripts/convert_MWAVCS_data_to_EPIC_format.py to repo
(*) Add .gitignore to repo

From be58a60 (package):
======================

(*) Add epic/examples/ioparms/MWAVCS_input_file_parameters.yaml to
repo

In setup.py,

(*) Include 'examples/ioparms/*.yaml' in package_data

From 7b1e867 (package):
======================

In epic/antenna_array.py,

(*) Inherit declared classes from 'object'

In epic/lwa_operations.py,

(*) Inherit declared classes from 'object'

From 94480db (package):
======================

In epic/data_interface.py,

(*) Expand type checking for ant_id in __init__() member function of
class DataContainer

From 1e34522 (package):
======================

In epic/data_interface.py,

(*) Remove initializing epic_path

In epic/lwa_operations.py,

(*) Remove initializing epic_path

From ae62e22 (package):
======================

(*) Add epic/lwa_operations.py to git repo

In epic/data_interface.py,

(*) Add statements to check if importing LSL module was successful
inside lwa_operations.py and perform LWA operations based on this
check

From a4a60e6 (package):
======================

(*) Rename changelog_MOFF.txt to changelog.txt

From 1046014 (package):
======================

In README.rst,

(*) Minor updates to point to updated AstroUtils package

From 6573949 (package):
======================

In README.rst,

(*) Minor updates to documentation

From d2085fe (package):
======================

In README.rst,

(*) Update some basic installation instructions

From 1cf5b52 (master):
=====================

(*) Convert EPIC into an installable python package
(*) Add .gitingore to repo
(*) Add LICENSE.md to repo
(*) Add README.rst to repo
(*) Add setup.py to repo
(*) Move module files EPICal.py, antenna_array.py,
antenna_array_for_profiler.py, antenna_beams.py, antenna_layout.py,
aperture.py, data_interface.py, and sim_observe.py from modules/
directory to epic/ directory
(*) Add __init__.py in epic/ directory

From a20093a (FX-input):
=======================

(*) No major changes in this version. Just testing.

From 607d0a4 (FX-input):
=======================

In antenna_array.py,

(*) Update checking of NaN values in both Ef and Et attributes in
member function update_flags() of class PolInfo and update flags
accordingly

From 354594d (FX-input):
=======================

In antenna_array.py,

(*) Update member function update() of class AntennaArray to update
electric field spectrum
(*) Update member function update() of class Antenna to update
electric field spectrum. Update docstring accordingly

From 18e1c6d (data-interface), 0ef6465 (master):
===============================================

(*) Merge changes in data-interface onto master branch

From 40dada5 (versatility):
==========================

(*) Commit stashed script changes (not very important)

From 40dada5 (data-interface):
=============================

In data_interace.py,

(*) Add classes DataContainer and DataStreamer to store and retrieve
voltage data in a generic format

From 75cbe1a (sim-uv):
=====================

In antenna_array.py,

(*) Minor changes in estimation of nearest neighbour pixel value
averaged over frequency in member function getStats() of class
NewImage. It has not been thoroughly tested yet.

From c42f325 (sim-uv):
=====================

In antenna_array.py,

(*) Estimate nearest neighbour spectrum and average in member function
getStats() of class NewImage. Update member function docstring
accordingly

From 3440502 (sim-uv):
=====================

In antenn_array.py,

(*) Fix bugs in AntennaArray.genMappingMatrix() to compute antenna
to grid mapping only when necessary

From 0e6acd6 (sim-uv):
=====================

In sim_observe.py,

(*) Fix bugs to allow simulation of antenna electric fields through
aperture plane computations

From 6398b6e (sim-uv):
=====================

In sim_observe.py,

(*) Remove commented and obsolete member function applyApertureWts()
of class AntennaArraySimulator

From 2585010 (sim-uv):
=====================

In sim_observe.py,

(*) Add keyword input aperture_updates in member function
observing_run( of class AntennaArraySimulator. Update member function
docstring accordingly
(*) Modify member function observing_run() of class
AntennaArraySimulator to pass aperture updates in call to observe()
member function of same class.                      
(*) Modif docstring of member function observe() of class
AntennaArraySimulator.

From 26d7c7c (sim-uv):
=====================

In sim_observe.py,

(*) Add input keyword aperture_info in member function observe() of
class AntennaArraySimulator. Update member function docstring
accordingly
(*) Modify member function observe() of class AntennaArraySimulator
to update antenna apertures

From b2dabdc (sim-uv):
=====================

In sim_observe.py,

(*) Create member function update_apertures() along with docstring
under class AntennaArraySimulator. Update class docstring accordingly

In aperture.py,

(*) Minor update in docstring

From a3ca432 (sim-uv):
=====================

In sim_observe.py,

(*) Comment out obsolete member function applyApertureWts() of class
AntennaArraySimulator

From a06f591 (sim-uv):
=====================

In sim_observe.py,

(*) Add input keyword domain_type to member function observing_run()
of class AntennaArraySimulator. Update member function docstring
accordingly

From 1100adf (sim-uv):
=====================

In aperture.py,

(*) Add member function update() along with docstring under class
Aperture. Update class docstring accordingly

From 1b29340 (sim-uv):
=====================

In sim_observe.py,

(*) Pass parameter phase_center_dircos in call to member
function generate_antenna_E_spectrum() inside member function
observe() of class AntennaArraySimulator

From a63200d (sim-uv):
=====================

In sim_observe.py,

(*) Add keyword input phase_center_dircos to member function
generate_antenna_E_spectrum() of class AntennaArraySimulator.
Update member function docstring accordingly
(*) Modify member function generate_antenna_E_spectrum() to
phase reference the generated antenna voltages based on the
input specified in phase_center_dircos

From 4367c91 (sim-uv):
=====================

In sim_observe.py,

(*) Add keyword input domain_type to member function observe() of
class AntennaArraySimulator. Update member function docstring
accordingly. 
(*) Add option to simulate using image plane or aperture plane
computations in observe() member function of class
AntennaArraySimulator

From 23cc0a3 (sim-uv):
=====================

In sim_observe.py,

(*) Change returned shape of output in member function
generate_antenna_E_spectrum() of class AntennaArraySimulator. Update
member function docstring accordingly
(*) Add input keyword action to specify if computed values are to be
just store or returned. Update member function docstring accordingly

From 9ad828b (sim-uv):
=====================

In sim_observe.py,

(*) Remove commented obsolete member function applyGeometricPhase()
of class AntennaArraySimulator

From a8b1eb5 (sim-uv):
=====================

In sim_observe.py,

(*) Add member function generate_antenna_E_spectrum() along with
docstring under class AntennaArraySimulator. Update class docstring
accordingly

In changelog_MOFF.txt,

(*) Indicate the filename to which previous revisions were made

From a8c9c43 (sim-uv):
=====================

In sim_observe.py,

(*) Remove input uvlocs in member function generate_sky_E_spectrum()
of class AntennaArraySimulator. Update docstring accordingly
(*) Modify return value in member function generate_sky_E_spectrum()
of class AntennaArraySimulator. Update docstring accordingly
(*) Update class docstring accordingly

From dd84fac (sim-uv):
=====================

In sim_observe.py,

(*) Add member function generate_antenna_wts_spectrum() along with
docstring under class AntennaArraySimulator. Update class docstring
accordingly

From 6417951 (sim-uv):
=====================

In sim_observe.py,

(*) Update member function propagate_sky_E_spectrum() of class
AntennaArraySimulator. Update docstring accordingly

From d86a4d3 (sim-uv):
=====================

In sim_observe.py,

(*) Add member function propagate_sky_E_spectrum() along with
docstring under class AntennaArraySimulator. Update class docstring
accordingly

From 6c4e4cf (sim-uv):
=====================

In sim_observe.py,

(*) Minor change in error message in member function
applyApertureWts() of class AntennaArraySimulator

From 8ce3c69 (sim-uv):
=====================

In sim_observe.py,

(*) Debug member function applyApertureWts() of class
AntennaArraySimulator

From e77a8e3 (sim-uv):
=====================

In sim_observe.py,

(*) Fix bugs in member function generate_sky_E_spectrum() of class
AntennaArraySimulator. 

From dc41c7f (versatility):
==========================

In sim_observe.py,

(*) Add member function generate_sky_E_spectrum() along with docstring
under class AntennaArraySimulator. Update class docstring accordingly

From 4e38f42 (versatility):
==========================

In antenna_array.py,

(*) Rename function evalCorrWts2PB() with evalApertureResponse() and
replace its occurrences throughout

From c605081 (versatility):
==========================

In antenna_array.py,

(*) Remove member function evalPowerPatternSkypos() of class
NewImage since it is now made redundant with the updated member
function evalPowerPattern() of the same class. Update class
docstring by removing description of this defunct member function
(*) Remove commented lines from member function evalPowerPattern() of
class NewImage

From 39365ca (versatility):
==========================

In antenna_array.py,

(*) Update member function evalPowerPattern() of class NewImage. It
can compute a grid of power pattern as well as at specified locations.
It makes use of function evalCorrWts2PB(). Update member function and
class docstring accordingly
(*) Update docstring of member function evalAntennaPairPBeam() of
class AntennaArray

From 618cdc3 (versatility):
==========================

In antenna_array.py,

(*) Rename function evalAntennaPairCorrWts2PB() to evalCrooWts2PB()
(*) Replace all occurrences of evalAntennaPairCorrWts2PB() to
evalCorrWts2PB()

From 39ee6aa (versatility):
==========================

In antenna_array.py,

(*) Add function evalAntennaPairCorrWts2PB() along with docstring to
estimate power pattern from antenna-antenna correlation weights in
the UV-plane
(*) Update member function evalAntennaPairCorrWts2PB() of class
AntennaArray to call newly created function
evalAntennaPairCorrWts2PB() to estimate power pattern. Update
docstring of member function

From 693d52a (versatility):
==========================

In antenna_array.py,

(*) Add member function evalAntennaPairPBeam() along with docstring
under class AntennaArray. Update class docstring accordingly

From fb1eab3 (versatility):
==========================

In antenna_array.py,

(*) Modify member function getStats() of class NewImage. It now uses
masked arrays to get the appropriate statistics. Update docstring
accordingly

From 41fae99 (versatility):
==========================

In antenna_array.py,

(*) Create member function evalPowerPatternSkypos() along with
docstring under class NewImage. Update class docstring accordingly

From a30105f (versatility):
==========================

In antenna_array.py,

(*) Fix bugs in member function removeAutoCorr() of class NewImage

From 4e1bc81 (versatility):
==========================

In antenna_array.py,

(*) Fix bugs in member function evalPowerPattern() of class
AntennaArray

From a6c9389 (versatility):
==========================

In antenna_array.py,

(*) Fix bugs in member function makeCrossCorrWtsCube() of class
AntennaArray

From 6103a0d (versatility):
==========================

In antenna_array.py,

(*) Fix bugs in member function evalAntennaPairCorrWts() of class
AntennaArray

From 0140e0d (versatility):
==========================

In antenna_array.py,

(*) Make operations compatible with sparse matrices in member function
makeAutoCorrCube() of class AntennaArray.

From 337e1ad (versatility):
==========================

In antenna_array.py,

(*) Add input keyword tbinsize to member function makeAutoCorrCube()
of class AntennaArray. Update docstring accordingly
(*) In member function evalAutoCorr() of class NewImage pass tbinsize
parameter while calling member function makeAutoCorrCube() of class
AntennaArray
(*) Fix bugs in member function avgAutoCorr() of class AntennaArray

From 7d903d2 (versatility):
==========================

In antenna_array.py,

(*) Fix bugs in member function evalGridIllumination() of class
Antenna
(*) Fix bugs in member function evalAntennaPairCorrWts() of class
AntennaArray

From 30a9688 (versatility):
==========================

In antenna_array.py,

(*) Fix bugs in member function pairTypetags() of class AntennaArray

From b92bd2e (versatility):
==========================

In antenna_array.py,

(*) Modify member function removeAutoCorr() of class NewImage to
use appropriate auto-correlation weights and data to remove from
the images

From 639eea9 (versatility):
==========================

In antenna_array.py,

(*) Create member function makeCrossCorrWtsCube() along with
docstring under class AntennaArray. Update class docstring
accordingly
(*) Fix bugs in FFT axes in member function evalPowerPattern() of
class NewImage

From 03c076f (versatility):
==========================

In antenna_array.py,

(*) Create member function evalAllAntennaPairCorrWts() along with
docstring under class AntennaArray. Update class docstring
accordingly
(*) Add and initialize attribute antenna_crosswts_set in member
function __init__() of class AntennaArray. Update class docstring
accordingly

From f76414e (versatility):
==========================

In antenna_array.py,

(*) Modify evalPowerPattern() member function of class NewImage.
Update class docstring accordingly. Comment out the earlier version
of the same member function

From 87c7d0b (versatility):
==========================

In antenna_array.py,

(*) Modify evalAutoCorr() member function of class NewImage. Update
class docstring accordingly. Comment out the earlier version of the
same member function
(*) Add and initialize attribute autocorr_data_vuf in __init__()
member function of class NewImage. Update class docstring accordingly

From 5a58942 (versatility):
==========================

In antenna_array.py,

(*) Remove usage of attributes antenna_auto_corr_wts_vuf and
antenna_auto_corr_data_vuf in class AntennaArray. Update class
docstring accordingly
(*) Remove commented lines in member function makeAutoCorrCube() of
class AntennaArray
(*) Remove commented earlier version of member function
evalAntennaAutoCorrWts() of class AntennaArray

From 06f22b0 (versatility):
==========================

In antenna_array.py,

(*) In member function makeAutoCorrCube() of class AntennaArray,
make use of attribute pairwise_typetag_crosswts_vuf instead of
antenna_autocorr_wts_vuf to determine autocorr_wts_cube and
autcorr_data_cube

From 71bfddd (versatility):
==========================

In antenna_array.py,

(*) Add input keyword forceeval to member function
evalAntennaPairCorrWts() of class AntennaArray. Update its docstring
accordingly
(*) Pass keyword forceeval in member function
evalAntennaAutoCorrWts() when calling evalAntennaPairCorrWts() of
class AntennaArray

From effb5e9 (versatility):
==========================

In antenna_array.py,

(*) Replace existing member function evalAntennaAutoCorrWts() of
class AntennaArray with an updated one that internally invokes the
member function evalAntennaPairCorrWts()

From 4bb6ec1 (versatility):
==========================

In antenna_array.py,

(*) Add member function evalAntennaPairCorrWts() along with docstring
under class AntennaArray. Update class docstring accordingly
(*) Update attribute antenna_pair_to_typetag in member function
pairTypetags() of class AntennaArray
(*) Rename attribute pairwise_antenna_crosswts_vuf to
pairwise_typetag_crosswts_vuf in class AntennaArray. Update class
docstring accordingly

From 9e75e7d (versatility):
==========================

In antenna_array.py,

(*) Add and initialize attributes antenna_pair_to_typetag and
pairwise_antenna_crosswts_vuf in __init__() member function of class
AntennaArray. Update class docstring accordingly

From 87c31fc (versatility):
==========================

In antenna_array.py,

(*) Create member function pairTypetags() along with docstring
under class AntennaArray. Update class docstring accordingly

From ce9ec92 (versatility):
==========================

In antenna_array.py,

(*) Add and initialize attribute pairwise_typetags in __init__()
member function of class AntennaArray. Update class docstring
accordingly

From fb7a1b7 (versatility):
==========================

In antenna_array.py,

(*) Update __add__() member function of class AntennaArray to update
attribute typetags with addition of each antenna instance
(*) Update __sub__() member function of class AntennaArray to remove
label of the removed antenna from the appropriate set under attribute
typetags

From 30ba9c1 (versatility):
==========================

In antenna_array.py,

(*) Add and initialize attribute timetags in member function
__init__() of class AntennaArray. Update class docstring accordingly

From b6340c0 (versatility):
==========================

In antenna_array.py,

(*) Create member function evalGridIllumination() along with docstring
under class Antenna. Update class docstring accordingly

From d2a7bc1 (versatility):
==========================

In antenna_array.py,

(*) Add option to update attribute typetag in member function update()
of class Antenna. Update docstring of member function accordingly

From 0557337 (versatility):
==========================

In antenna_array.py,

(*) Add and initialize attribute typetag in __init__() member function
of class Antenna. Update class docstring accordingly
(*) Modify __str__() member function of class Antenna to print
attribute typetag 

From 95123a5 (versatility):
==========================

In antenna_array.py,

(*) Import scipy.sparse module as SpM instead of SM. Replace all
occurrences of SM with SpM

From a56c1c2 (versatility):
==========================

In antenna_array.py,

(*) Modify member function makeAutoCorrCube() under class
AntennaArray to use recently created attribute auto_corr_data to
estimate data cube from auto-correlations
(*) Minor update in docstring of member function makeAutoCorrCube()
of class AntennaArray

From 74dc26a (versatility):
==========================

In antenna_array.py,

(*) Add member function evalAutoCorr() along with docstring under
class AntennaArray. Update class docstring accordingly
(*) Add and initialize attribute auto_corr_data in __init__()
member function of class AntennaArray. Add its description to
class docstring
(*) Replace all occurrences of 'recent' with 'current' for datapool
variable
(*) Remove attribute auto_corr_avg and references to it from class
AntennaArray

From 53417fc (versatility):
==========================

In antenna_array.py,

(*) Create member function avgAutoCorr() along with docstring under
class AntennaArray. Update docstring of class accordingly
(*) Add and initialize attributes tbinsize, auto_corr_avg in
__init__() member function of class AntennaArray. Update docstring
of class and member function accordingly

From ce49978 (versatility):
==========================

In antenna_array.py,

(*) Create member function makeAutoCorrCube() along with docstring
under class AntennaArray. Update class docstring accordingly

From ce49978 (versatility):
==========================

In antenna_array.py,

(*) Add and initialize attributes antenna_autocorr_wts_vuf and
antenna_autocorr_set in __init__() member function of class
AntennaArray. Update class docstring accordingly
(*) Add and initialize attribute antenna_autocorr_vuf_ind in
__init__() member function of class AntennaArray. Update class
docstring accordingly
(*) Add and initialize attribute antenna_autocorr_vuf_ind in
__init__() member function of class AntennaArray. Update class
docstring accordingly
(*) Minor update in docstring of class get_E_fields() of class
Antenna

From cb259a5 (versatility):
==========================

In antenna_array.py,

(*) Add and initialize attribute antenna_autocorr_set in __init__()
member function of class AntennaArray
(*) Add member function evalAntennaAutoCorrWts() along with docstring
under class AntennaArray. Update docstring of class accordingly
(*) Replace 'P1' to correct key 'P2' in member function evalAutoCorr()
of class NewImage

From ff4e134 (versatility):
==========================

In antenna_array.py,

(*) Add member function getStats() including docstring under class
NewImage. Update class docstring accordingly. Need further
development

From e100ea7 (versatility):
==========================

In sim_observe.py,

(*) Replace use of numpy.split() with numpy.array_split() in
member function generate_E_spectrum() of class AntennaArraySimulator

From 0c71912 (versatility):
==========================

In sim_observe.py,

(*) Import progressbar and writer_module
(*) Add progressbar in member function observing_run() of class
AntennaArraySimulator

From 60a71aa (versatility):
==========================

In sim_observe.py,

(*) Update docstrings of member functions generate_E_spectrum(),
observe() and observing_run() of class AntennaArraySimulator to
preferably not invoke parallelization since it appears to be slower
due to overheads

From 652deaf (versatility):
==========================

In sim_observe.py,

(*) Fix bug in splitting array in case of parallel processing in
member function generate_E_spectrum() of class AntennaArraySimulator
(*) Fix bug in assigning attribute Ef_info in member function
generate_E_spectrum() of class AntennaArraySimulator

From 613a8bc (versatility):
==========================

In sim_observe.py,

(*) Roll axis on voltage patterns determined in parallel processing to
get the right dimensions in member function generate_voltage_pattern()
of class AntennaArraySimulator

in antenna_beams.py,

(*) Add function antenna_beam_arg_splitter() which is a wrapper for
function antenna_beam_generator() and will be used in cases of
parallel processing

From ee6ab99 (versatility):
==========================

In sim_observe.py,

(*) Add input randvals in function generate_E_spectrum() to accept
externally generated random numbers that will be used in generating
electric fields. Update docstring accordingly
(*) Add input randomseed in function generate_E_spectrum() to accept
a user-defined seed for random number generator. This will be used if
the other input randvals is set to None. Update docstring accordingly
(*) Add input randomseed in member function generate_E_spectrum() of
class AntennaArraySimulator. Update docstring accordingly
(*) Modify member function generate_E_spectrum() of
class AntennaArraySimulator to generate random values and pass them
to function generate_E_spectrum() as externally generated random
normal values through the input randvals. This ensures the same
random values are generated whether parallelization is invoked or not
member function generate_E_spectrum() of class AntennaArraySimulator
(*) Add input randomseed in member function observe() of class
AntennaArraySimulator. Update docstring accordingly
(*) Modify member function observe() of class AntennaArraySimulator
to pass randomseed parameter to member function generate_E_spectrum()
of the same class
(*) Add input randomseed in member function observing_run() of class
AntennaArraySimulator. Update docstring accordingly
(*) Modify member function observing_run() of class 
AntennaArraySimulator to pass randomseed parameter to member function
observe() of the same class

From 42e8f57 (versatility):
==========================

In sim_observe.py,

(*) Fix bug in generate_E_spectrum() member function of class
AntennaArraySimulator in producing random electric fields where the
randomization is to be over only frequency and the sky objects but
not over antennas. Antennas differ only by their geometric phases and
voltage patterns

From f0043b1 (versatility):
==========================

In antenna_array.py,

(*) Minor bug fix in initializing attribute f0 in __init__() member
function of class AntennaArray when input parameter antenna_array is
provided

In sim_observe.py,

(*) Minor bug fix in initializing attribute f in __init__() member
function of class AntennaArraySimulator by taking every second sample
in the frequency vector

From 22f8c54 (versatility):
==========================

In sim_observe.py,

(*) Minor bug fix in member function generate_E_timeseries() of class
AntennaArraySimulator.

From 0a663d5 (versatility):
==========================

In sim_observe.py,

(*) Bug fix in determining antenna keys in member function
generate_E_spectrum() when attribute identical_antennas is set to
False in member function AntennaArraySimulator

From 3a7daa0 (master):
=====================

(*) Adjust import of modules from astroutils package (previously
general package) in sim_observe.py, antenna_array.py, aperture.py,
antenna_beams.py, antenna_array_for_profiler.py

From da19ecc (catalog-sim):
==========================

In sim_observe.py,

(*) Minor modifications in docstrings in class AntennaArraySimulator

From 0304ba7 (catalog-sim):
==========================

In sim_observe.py,

(*) Save sky model in save() member function of class
AntennaArraySimulator

From c064e82 (catalog-sim):
==========================

In sim_observe.py,

(*) Import package h5py for handling data in HDF5 format
(*) Add member function save() along with docstring under class
AntennaArraySimulator to save data to an external file in HDF5 format.
Update docstring of class AntennaArraySimulator accordingly
(*) Add, initialize attribute Et_stack in __init__() member function
of class AntennaArraySimulator. Update description in class docstring
accordingly
(*) Add, initialize attribute obsmode in __init__() member function
of class AntennaArraySimulator. Update description in class docstring
accordingly
(*) Add keyword input obsmode in member function observe() of class
AntennaArraySimulator. Update docstring accordingly
(*) Update attribute obsmode in member functions observing_run() and
observe() of class AntennaArraySimulator

From b3ccac1 (catalog-sim):
==========================

In sim_observe.py,

(*) Add attributes timestamp and timestamps to class
AntennaArraySimulator and initialize them in __init__() member
function. Update class and member function docstrings accordingly.
(*) Update attributes timestamp and timestamps in member function
observe() of class AntennaArraySimulator.
(*) Fix timing bug in member function observing_run() of class
AntennaArraySimulator

From a8d4a55 (catalog-sim):
==========================

In sim_observe.py,

(*) Fix bug due to dimensional compatibility checking in member
function stack_E_spectrum() of class AntennaArraySimulator

From d198c69 (catalog-sim):
==========================

In sim_observe.py,

(*) Add keyword input stack to member function observe() of class
AntennaArraySimulator. Update docstring of member function
accordingly
(*) Update docstring of class AntennaArraySimulator with description
of member function observing_run()

From 55963e4 (catalog-sim):
==========================

In sim_observe.py,

(*) Add member function observing_run() along with docstring under
class AntennaArraySimulator. Update docstring of class accordingly
(*) In member funciton observe() of class ANtennaArraySimulator,
handle the case properly when there are no objects in the sky model
visibile in the upper hemisphere
(*) Update docstring describing correctly the output of member 
function generate_E_spectrum() of class AntennaArraySimulator
(*) Minor changes in observe() member function of class
AntennaArraySimulator to keep the shapes correct for phase_center
and pointing_center

From 3e89059 (catalog-sim):
==========================

In sim_observe.py,

(*) Add default to input Ef_info in member function stack_E_spectrum()
of class AntennaArraySimulator. Modify body and docstring of member
function accordingly

From 94ec489 (catalog-sim):
==========================

In sim_observe.py,

(*) Add member function observe() of class AntennaArraySimulator
along with docstring. Update docstring of class AntennaArraySimulator
accordingly
(*) In member functions generate_voltage_pattern(),
load_voltage_pattern(), and generate_E_spectrum() of class
AntennaArraySimulator, sort by antenna keys for processing
(*) Fix bugs in member function generate_E_spectrum() of class
AntennaArraySimulator
(*) Fix bug in global function generate_E_spectrum()

From 439b229 (catalog-sim):
==========================

In sim_observe.py,

(*) Make member function load_voltage_pattern() of class
AntennaArraySimulator handle polarization. Update docstring
accordingly

From ef828f0 (catalog-sim):
==========================

In antenna_beams.py,

(*) Rename primary_beam_generator() to antenna_beam_generator()

In sim_observe.py,

(*) Change all calls from primary_beam_generator() to
antenna_beam_generator()

From 257b7b0 (catalog-sim):
==========================

In sim_observe.py,

(*) Compute antenna beams under both polarizations in member function
generate_voltage_pattern() under class AntennaArraySimulator. Update
docstring accordingly
(*) Add input keyword pointing_ceter in member function
generate_voltage_pattern() under class AntennaArraySimulator. Update
docstring accordingly

In antenna_beams.py,

(*) Include uniform_rectangular_aperture() and
uniform_square_aperture() computations inside wrapper
primary_beam_generator(). Update docstring accordingly


From e781fef (catalog-sim):
==========================

In sim_observe.py,

(*) Change iteritems() to itervalues() in member function
generate_voltage_pattern() of class AntennaArraySimulator.
(*) Comment setting telescope id in member function
generate_voltage_pattern() of class AntennaArraySimulator

From cc866f0 (catalog-sim):
==========================

In antenna_beams.py,

(*) Compute and return power pattern if input keyword power is set
in function array_field_pattern()
(*) Minor changes to docstrings throughout

From a069e86 (catalog-sim):
==========================

In antenna_beams.py,

(*) Add input keyword power to functions to return power patterns.
Update docstring accordingly

From 432dace (catalog-sim):
==========================

In antenna_beams.py,

(*) Change sign of relative rotation by amount east2ax1 in functions
isotropic_radiators_array_field_pattern() and
uniform_rectangular_aperture(). This is because azimuths are measured
clockwise from North while east2ax1 is measured anti-clockwise from
East

From 1d870d3 (catalog-sim):
==========================

In antenna_beams.py,

(*) Add function uniform_square_aperture() with docstring
(*) Minor changes in docstrings

From bc8df96 (catalog-sim):
==========================

In antenna_beams.py,

(*) Add function uniform_rectangular_aperture() with docstring

from 67a27c1 (catalog-sim):
==========================

In sim_observe.py,

(*) Remove input argument telescopes to member function
generate_voltage_pattern() of class AntennaArraySimulator. Construct
telescope information internally. Update docstrong accordingly

In antenna_beams.py,

(*) Remove usage of nrand in primary_beam_generator(). Update
docstring accordingly

From 8019158 (catalog-sim):
==========================

(*) Add antenna_beams.py to git repo

From 22b031a (catalog-sim):
==========================

In sim_observe.py,

(*) Add member function generate_voltage_pattern() along with
docstring under class AntennaArraySimulator. Update class docstring
accordingly

From ca708fd (catalog-sim):
==========================

In sim_observe.py,

(*) Add memner function generate_E_timeseries() along with docstring
under class AntennaArraySimulator. Update class docstring accordingly
(*) Add and initialize attribute t in __init__() member function of
class AntennaArraySimulator. Update docstring accordingly

From 9449a8e (catalog-sim):
==========================

In sim_observe.py,

(*) Add attribute Ef_info and initialize in __init__() member function
of class AntennaArraySimulator. Update docstrings accordingly
(*) Add input keyword action in member function stack_E_spectrum() of
class AntennaArraySimulator. Update docstring accordingly

From bc1fe11 (catalog-sim):
==========================

In sim_observe.py,

(*) Add and initialize attribute Ef_info in __init__() member function
of class AntennaArraySimulator. Update docstring accordingly
(*) Add member function stack_E_spectrum() along with docstring under
class AntennaArraySimulator to stack E-field spectra along time axis.
(*) Update docstring of class AntennaArraySimulator for these changes

From 6f3373f (catalog-sim):
==========================

In sim_observe.py,

(*) Create function generate_E_spectrum() to generate E-field
spectra using individual antenna patterns. Docstring added.
(*) Create function generate_E_spectrum_arg_splitter() to wrap the
function generate_E_spectrum() for unwrapping the arguments and
perform parallel processing
(*) Create member function generate_E_spectrum() along with docstring
under class AntennaArraySimulator that is capable of invoking parallel
processes for simulating E-fields observed by the antenna array.
Update docstring of class AntennaArraySimulator accordingly

From 85277b5 (catalog-sim):
==========================

In sim_observe.py,

(*) Replace input altaz with theta_phi in interp_beam(). Update
docstring accordingly
(*) Add input altaz in member function find_voltage_pattern() of
class AntennaArraySimulator. Update docstring accordingly

From 0ce59e0 (catalog-sim):
==========================

In sim_observe.py,

(*) Add function stochastic_E_timeseries_arg_splitter() which is a
wrapper for stochastic_E_timeseries() in case of parallel processing

From 1144139 (catalog-sim):
==========================

In sim_observe.py,

(*) Add function interp_beam() to interpolate antenna pattern at
given locations and frequencies. Add docstring
(*) Add function interp_beam_arg_splitter() which is a wrapper for
interp_beam() in case of parallel processing

From fe8e58d (catalog-sim):
==========================

In sim_observe.py,

(*) Add member function find_voltage_pattern() with docstring under
class AntennaArraySimulator. Update docstring of class accordingly.

From bf1f0c2 (catalog-sim):
==========================

In sim_observe.py,

(*) Add member function upper_hemisphere() with docstring under
class AntennaArraySimulator. Update docstring of class accordingly.
(*) Add attributes latitude and longitude in __init__() member
function of class AntennaArraySimulator. Update docstrings of
__init__() member function and class AntennaArraySimulator

In antenna_array.py,

(*) Add attribute longitude in class Antenna and initialize in
__init__() member function. Update docstrings accordingly
(*) Add attributes latitude and longitude in class AntennaArray
and initialize in __init__() member function. Update docstrings
accordingly
(*) Update attributes latitude and longitude in member function
__add__() of class AntennaArray

From aa2ed14 (catalog-sim):
==========================

In sim_observe.py,

(*) Create class AntennaArraySimulator with docstring
(*) Create __init__() member function along with docstring under
class AntennaArraySimulator

In antenna_array.py,

(*) Trivial edit of typo in docstring

From ef2f2bb (ant-beams-in-sim):
===============================

In sim_observe.py,

(*) Add keyword voltage_pattern in monochromatic_E_timeseries() and
update docstring. Modify monochromatic_E_timeseries() to now
simulate E-fields using voltage pattern that is specified for every
antenna at every sky location for the given frequency channel.

From 19a37e7 (ant-beams-in-sim):
===============================

In sim_observe.py,

(*) Add keyword input voltage_pattern in monochromatic_E_spectrum()
and update docstring accordingly. Modify monochromatic_E_spectrum()
to now simulate E-fields using voltage pattern that is specified for 
every antenna at every sky location for the given frequency channel.

From dcac707 (ant-beams-in-sim):
===============================

In sim_observe.py,

(*) Add keyword voltage_pattern in stochastic_E_timeseries() and
update docstring. Modify stochastic_E_timeseries() to now
simulate E-fields using voltage pattern that is specified for every
antenna at every sky location for all frequency channels.

From 4e5d4d3 (master):
=====================

In sim_observe.py,

(*) Add keyword input voltage_pattern in stochastic_E_spectrum() and
update docstring accordingly. Modify stochastic_E_spectrum() to now
simulate E-fields using voltage pattern that is specified for every
antenna at every sky location for all frequency channels.

From 2884441 (Adam-master), cc0bbb2 (Adam origin master):
========================================================

(*) Merge 2884441 (Adam-master), cc0bbb2 (Adam origin master)

From 66d4328 (master):
=====================

(*) Add untracked main level script files to repo

From ee36176 (master):
=====================

In antenna_array.py,

(*) Minor correction in docstring of member function grid() of class
InterferometerArray

From c72c989 (branch cal_devel_data):
====================================

(*) Fine tuning and consolidating cal noise analysis.
(*) ... should really merge back to cal_devel.

From 66d698a (branch cal_devel_data):
============
(*) Adding wrapper cal_noise_analysis.py to look at noise behavior of cal solutions.

From 64d6cbd (branch cal_devel_data):
============
(*) minor tweaks to multi_source_cal

From efdd4e8 (branch cal_devel_data):
============
(*) Lots of tweaks to data calibration wrapper to make it work

From 84827db (branch cal_devel_data):
============
(*) Adding ability to calibrate using correlations from multiple pixels

From cb47d88 (branch cal_devel_data):
============
(*) Fiddled with progress bars in LWA cal script

From 2befd8c (branch cal_devel_data):
============
(*) Added calibration minor loop to iterate over stationary data correlation.

From bbd355d (branch cal_devel_data):
============
(*) Added options to calibrate_LWA_data.py to replace data with simulation
(*) Added option to flatten_array in calibration to account for 2D gridding

From fdc18d7 (branch cal_devel_data):
============
(*) Fixed bug where calibration expression included z*n term that shouldn't have been there.
(*) Added ability to give sky model to cal with no freq dependence
(*) Updated cal class to handle nans
(*) Moved frequency average to before fixing phase
(*) Inserted temporary fix to holographic image phase issue (fix_holographic_phase)

From 7788225 (branch cal_devel_data):
============
(*) Fixed gain_factor->damping_gain change

From 7da7acd (branch cal_devel_data):
============
(*) Removed some old code in sim scripts
(*) Added cal_paper_sim for simulation to be used in cal paper
(*) Changed gain_factor in cal to damping_factor for ease of reading
	Inverted behavior (gf of 0.7 == df of 0.3)

From 79df434 (branch cal_devel_data):
============
(*) Finished support to exclude autos in cal
(*) Fixed rxr noise amplitude in cal simulation

From 4cab0bc (branch cal_devel):
============
(*) Cleaned up a ton of cal code
(*) Removed "phased visibilities"
(*) Added script to calibrate LWA data
(*) Added support to average cal solutions in freq
(*) Added option to model auto noise
(*) Started support to exclude autos from cal

From 0b58e4e (branch cal_devel):
============
(*) Fixed calibration phase of reference antenna.
(*) Added plotting code to cal wrapper.

From e6c6fc4 (branch cal_devel):
============
(*) Mostly added support for cal source off-center.
(*) Still need to add beam value for this (Nithya's working on it).
(*) Added cal2 class to rework/clean up code. Will eventually replace cal.

From 474b84e (branch cal_devel):
============
(*) Small tweaks to rename cal to EPICal.

From 9da3ea9 (branch cal_devel):
============
(*) Fine tuning some parameters to make multi-source work better.
(*) Took out functional form in multi_source_cal.py.


From b5c3ff6 (branch cal_devel):
============
(*) merging master into cal_devel branch.

From b48b5b3 (branch cal_devel):
============
(*) Updating multi_source_cal wrapper to conform to new gridding.
(*) Now using square tophat beams for cal script.

From 4a47ed5 (branch cal_devel):
============

(*) Tweaking some parameters in cal script, cleaning code
(*) Fixed typo in cal module
(*) Note somewhere I introduced a bug in the multi-cal which I'm
    still hunting!

From b867de8 (branch cal_devel):
============

(*) Revamped the multi-source calibration to incorporate all sources
    at once.
(*) Requires model visibilities to be formed before the cal loop.
(*) Multi-source is now independent of the single source loop, but
    does conform with it under the single-source limit.
(*) Added option to add receiver noise (independent for each antenna)
    at the script level of cal loops. Will eventually want this in
	antenna class

From d49e4c4 (branch cal_devel):
============

(*) Added LWA antenna positions for calibration script.

From a6e8d49 (branch cal_devel):
============

(*) Added a new expression for calibration updates.
	It is a simpler expression and seems to give more sane solutions.
(*) Keeping the old expression by setting the cal_ver='old' when initializing
	cal object.

From b55db4b (branch cal_devel):
============

(*) Adding structure for first-attempt multi-source calibration.
	Note: NOT currently working, but conforms to single source just fine.

From 47b54557 (branch cal_devel):
=============

(*) Fixed bug in the way gains were averaged over time for the non-inverted
gains case.


From e533f496 (branch cal_devel):
=============

(*) Major upgrade to cal algorithm to include proper frequency dependence.
(*) Major restructuring of cal class to account for frequency and anticipate
multi-source calibration.
(*) Removing simple_cal_script as it is now obsolete.
(*) Added reference point to cal class for phasing of antennas.
(*) Fixed bug when averaging gains and gain_inv = False.

From a0c1b87 (branch cal_devel):
============

(*) Added functionality for off-center calibrator.
	Required a lot of format changes, so simple_cal_script needs updating.
(*) Added script off_center_cal.py.
(*) Still have bugs that need to be worked out. Specifically, there seems to
be a systematic bias in my off-center calibration solutions.
(*) More cleaning of code.	

From afcf778 (FX-serial-all-lines-profiling):
============================================

In antenna_array.py,

(*) Assign NaN values in Ef and Vf to 0.0 in member functions
applyMappingMatrix() of classes InterferometerArray and AntennaArray

In antenna_array_for_profiler.py,

(*) Assign NaN values in Ef and Vf to 0.0 in member functions
applyMappingMatrix() of classes InterferometerArray and AntennaArray
(*) THIS CHANGE WILL CHANGE THE LINES WHERE THE APPROPRIATE LINES IN THE
PROFILE OUTPUT MUST BE PARSED BUT NOT CORRECTING FOR IT AT THE MOMENT.
NEEDS TO BE CORRECTED EVENTUALLY

From 70160c7 (FX-serial-all-lines-profiling):
============================================

(*) Rename antenna_array.py to antenna_array_for_profiler.py
(*) Create antenna_array.py without @profile decorators

From 7da842f (FX-serial-all-lines-profiling):
============================================

Add MOFF_FX_performance_profiling_script_with_filling_fraction.sh,
MOFF_FX_performance_profiling_script_filename_corrections.sh,
MOFF_FX_performance_comparison_all_lines.py, and MOFF_FX_crossover.py,
to git repository.

In antenna_layout.py,

(*) Estimate n_total in hexagon_relations() for the case when
n_center is specified in input
(*) Add value checking in hexagon_relations() that n_center must be
odd

From 989fad9 (performance):
==========================

(*) Reorganize directory structure for profiling outputs
(*) Add antenna_layout.py to git repo

In antenna_array.py,

(*) Add @profile decorator to all function definition statements

In aperture.py,

(*) Remove usage of rmin in auto_convolved_circular() function

From 7d31bbb (performance):
==========================

(*) Add new MOFF_FX_performance_comparison.py to git repo which does
the timing comparison between MOFF and FX runs

From b5eaaaf (performance):
==========================

(*) Make MOFF_FX_performance_comparison.py modular so it can be
executed as a main program as well as imported as a module
(*) Rename MOFF_FX_performance_comparison.py to
MOFF_FX_performance_profiling.py
(*) Add files MOFF_FX_performance_profiling_shell_script_generator.py
and MOFF_FX_performance_profiling_script.sh to git repository

In antenna_array.py,

(*) Add @profile decorators to functions that need to be profiled in
antenna_array.py

From 28de1e2 (performance) + 716213e (patch1):
=============================================

Merge branch patch1 from master onto performance branch

From 502ef3f (branch performance):
=================================

In antenna_array.py,

(*) Add keyword input pad to member function removeAutoCorr() of class
NewImage. Update docstring accordingly
(*) Minor modification to docstring of member function
evalPowerPattern() of class NewImage
(*) @profile decorators removed for testing

5d80d15 (performance) + f87ab5b (padding-patch):
===============================================

(*) Merge branches performance and padding-patch

From 5d80d15 (branch performance):
=================================

In antenna_array.py,

(*) Add @profile decorators for functions that have to be profiled

From 4fa22d8 (branch master):
============================

In antenna_array.py,

(*) Minor modification to docstring of removeAutoCorr() member
function of class NewImage

From ee36176 (branch padding):
=============================

In antenna_array.py,

(*) Add keyword input pad to member function removeAutoCorr() of class
NewImage. Update docstring accordingly
(*) Minor modification to docstring of member function
evalPowerPattern() of class NewImage

>>>>>>> upstream/FX-serial-all-lines-profiling
####### Ancestor
======= end
From f87ab5b (branch padding):
=============================

In antenna_array.py,

(*) Add input keyword cal_loop in imagr() member function of class
NewImage. Update docstring accordingly
(*) In case of MOFF imaging using sparse matrix mapping function,
input parameter cal_loop in member function imagr() of class
NewImage is passed in the call to applyMappingMatrix() member
function of class AntennaArray

From d505813 (branch pbeam):
===========================

In antenna_array.py,

(*) Add member function evalPowerPattern() (with docstring) under
class NewImage to evaluate the power pattern from auto-correlation in
the UV-plane
(*) Detach estimation of power pattern attribute pbeam from member
function evalAutoCorr() in class NewImage and place it under the new
member function evalPowerPattern() under the same class
(*) In member function imagr() of class NewImage, accept the value of
input keyword pad only if it is positive. Remove lines of code
estimating various quantities when they were performed with a negative
value for pad. Modify docstring accordingly

From 5d80d15 (branch padding):
=============================

In antenna_array.py,

(*) Change input keyword pad from string type to integer type in
member function imagr() of class NewImage. Update docstring
accordingly
(*) Make padding flexible and fully controllable by user
(*) Remove few previously commented lines in imagr() member 
function of class NewImage

>>>>>>> master
From 99344bf (branch performance):
=================================

In antenna_array.py,

(*) Fix bug in imagr() member function of class NewImage in
selecting the original unpadded portion of the qunaities in
UV-plane for both MOFF and FX imaging

From 5b125b4 (branch mapping-matrix):
====================================

(*) Rename MOFF_simulations_test_sparse_matrix.py to
compare_MOFF_FX_simulations_test_sparse_matrix.py under
git repository

In antenna_array.py,

(*) Add input parameter grid_map_method in member function
imagr() of class NewImage whch allows it to handle the regular
gridding mapping method or the one based on sparse matrix
operations. Modify member function docstring accordingly

From 51648e1 (branch mapping-matrix):
====================================

In antenna_array.py,

(*) Make sparse matrix initialization more efficient in member
functions genMatrixMapping() of classes InterferometerArray and
AntennaArray
(*) Create global functions genMatrixMapper_arg_splitter() and
genMatrixMapper() required for parallelization of sparse matrix
generation
(*) Add keyword inputs parallel and nproc in member functions
genMatrixMapping() of classes InterferometerArray and
AntennaArray. Modify docstring accordingly
(*) Add parallelization to member functions genMatrixMapping() of
classes InterferometerArray and AntennaArray
(*) The parallelized version tested so far seems to have worse
performance relative to the serial version possibly due to large
overheads. Unless testing with larger data sets clearly indicates
otherwise, it is advised to stick to the serial version of the
member functions genMappingMatrix() in classes InterferometerArray
and AntennaArray

From 56bcd6b (branch mapping-matrix):
====================================

In antenna_array.py,

(*) Add attribute bl2grid_mapper to class InterferometerArray to hold 
sparse mapping matrix information
(*) Add description of newly added attribute bl2grid_mapper in
docstring of class InterferometerArray
(*) Add member function genMappingMatrix() (with docstring) to class
InterferometerArray
(*) In member function imagr() of class NewImage, in case of FX
imaging, replace call to member function make_grid_cube_new() of
class InterferometerArray with new member function applyMappingMatrix()
of class InterferometerArray
(*) Add progressbar in member functions genMappingMatrix() of classes
AntennaArray and InterferometerArray
(*) Add description of newly added member function genMappingMatrix()
in the docstring of class InterferometerArray
(*) In docstring of member function genMappingMatrix() of class
AntennaArray, remove description for cal_loop input (which is
non-existent in the member function definition)
(*) Add description of attribute ant2grid_mapper in docstring of class
AntennaArray

From b46acfc (branch mapping-matrix):
====================================

In antenna_array.py,

(*) In member function imagr() of class NewImage, in case of MOFF
imaging, replace call to member function make_grid_cube_new() of
class AntennaArray with new member function applyMappingMatrix()
of class AntennaArray
(*) Add type checking in imagr() member function of class NewImage to
ensure the gridded quantities if in sparse matrix form are converted
appropriately
(*) Remove commented and obsolete class Image

From 7fc4eea (branch mapping-matrix):
====================================

In antenna_array.py,

(*) Add member function applyMappingMatrix() (with docstring) to class
AntennaArray. At the moment the gridded quantities after application
of the antenna-to-grid mapping matrix can be stored as dense or sparse
matrices. Yet to be determined which is the best format to store these
quantities
(*) Add description of newly added member function 
applyMappingMatrix() in the docstring of class AntennaArray

From 69dbe0d (branch mapping-matrix):
====================================

In antenna_array.py,

(*) Add attribute ant2grid_mapper to class AntennaArray to hold sparse
mapping matrix information
(*) Import scipy module sparse for sparse matrix operations
(*) Add member function genMappingMatrix() (with docstring) to class
AntennaArray
(*) Add description of newly added member function genMappingMatrix()
in the docstring of class AntennaArray

From 17d033b (branch zero-spacing):
==================================

In antenna_array.py,

(*) Increase distNN by a factor 2 to make estimation of neighbour
pixels liberal in member function removeAutoCorr() of class NewImage
(*) Increase distNN by a factor 2 to make estimation of neighbour
pixels liberal in member function grid_convolve_new() of class
AntennaArray
(*) Increase distNN by a factor 2 to make estimation of neighbour
pixels liberal in member function grid_convolve_new() of class
InterferometerArray

From fed207e (branch zero-spacing):
==================================

In antenna_array.py,

(*) Fix bug in calling the right polarization variable cpol instead
of apol in member function imagr() of class NewImage
(*) Add value checking of synthesized beam and dirty image inside
member function removeAutoCorr() of member function NewImage to ensure
they have no non-negligible imaginary component
(*) Assign values to attributes nzsp_beam, nzsP_img, nzsp_wts_vuf,
nzsp_vis_vuf, nzsp_beam_avg, nzsp_img_avg, nzsp_grid_vis_avg,
nzsp_grid_illumination_avg in member function removeAutoCorr() of
class NewImage

From b937371 (branch zero-spacing):
==================================

In antenna_array.py,

(*) Add attributes nzsp_grid_vis_avg, nzsp_grid_illumination_avg,
nzsp_wts_vuf, nzsp_vis_vuf, nzsp_img, nzsp_beam, nzsp_img_avg,
nzsp_beam_avg, pbeam and initialize in __init__() member function of 
class NewImage
(*) Add member function removeAutoCorr() (with docstring) to class
NewImage. Set attributes nzsp_grid_illumination_avg, nzsp_wts_vuf, 
nzsp_grid_vis_avg, nzsp_vis_vuf, nzsp_img, nzsp_beam, nzsp_img_avg,
nzsp_beam_avg in this member function
(*) In member function evalAutoCorr() of class NewImage, estimate
and store power pattern in attribute pbeam

From d7ba9c1 (branch zero-spacing):
==================================

In aperture.py,

(*) Minor change in docstring of member function __init__() of class
Aperture

In antenna_array.py,

(*) Add attributes autocorr_set and autocorr_wts_vuf and initialize
in __init__() member function of class NewImage
(*) Add member function evalAutoCorr() (with docstring) to class
NewImage. Set attributes autocorr_set and autocorr_wts_vuf inside this
member function

From 376f350 (branch analytic-kernel) and f5785c9 (branch imgstack):
===================================================================

(*) Merge analytic-kernel and imgstack branches

From 10f4625 (on branch imgstack):
=================================

(*) Test image stacking (primarily from MOFF) using main level script
compare_simulations_MOFF_FX_test_stacking.py

From 612f745 (on branch imgstack):
=================================

In antenna_array.py,

(*) Compute uv-grid attributes wts_vuf and vis_vuf in member function
imagr() of class NewImage for both MOFF and FX cases
(*) Change attribute name grid_Vf_stack and grid_Vf_avg in class
NewImage throughout to grid_vis_stack and grid_vis_avg respectively
(*) Add and initialize attributes wts_vuf and vis_vuf in __init__()
member function of class NewImage
(*) Add resetting of attributes wts_vuf and vis_vuf in reset()
member function of class NewImage
(*) Minor bug fix in correct estimation of attribute
grid_illumination_avg in member function accumulate() of NewImage
class
(*) Variable pol inside member function imagr() of class NewImage is
now converted to be a list instead of a numpy array
(*) Minor bug fix in assignment of variable twts in member function
accumulate() of class NewImage
(*) Minor bug fix in estimating attribute grid_vis_avg in accumulate()
member function of class NewImage
(*) In member function accumulate() of class NewImage, average
quantities only when they are not set to None under the corresponding
polarization

From 1cc3d96 (on branch imgstack):
=================================

In antenna_array.py,

(*) Remove mean subtraction from imagr() member function of class
NewImage in case of electric-field based MOFF imaging

From 0a1cd79 (on branch imgstack):
=================================

In antenna_array.py,

(*) Add input keyword stack to member function imagr() of class
NewImage to invoke stack() to stack the image and UV quantities.
Update docstring accordingly

From 852370f (on branch imgstack):
=================================

In antenna_array.py,

(*) To obtain attribute grid_Vf of class InterferometerArray,
include the multiplication of visibilities by the grid illumination
to obtain the gridded visibilities before imaging in member function
make_grid_cube_new(). This step was forgotten in earlier version.
This is a major bug fix that yields the correct amplitude scale for
the FX images
(*) To obtain attribute grid_Ef of class AntennaArray,
include the multiplication of electric fields by the grid illumination
to obtain the gridded electric fields before imaging in member 
function make_grid_cube_new(). This step was forgotten in earlier 
version. This is a major bug fix that yields the correct amplitude 
scale for the MOFF images

From efb0d88 (on branch imgstack):
=================================

In antenna_array.py,

(*) Add and initialize attribute tbinsize in __init__() member
function of class NewImage
(*) Add and initialize attribute twts in __init__() member
function of class NewImage
(*) Add member function accumulate() (with docstring) to class
NewImage where attributes tbinsize and twts are really assigned
(*) Fix typo in attribute name grid_illumination_stack in class
NewImage

From c63b1d0 (on branch imgstack):
=================================

In antenna_array.py,

(*) Add and initialize attributes img_avg, beam_avg, grid_Vf_avg, and
grid_illumination_avg in __init__() member function of class NewImage

From d9b7910 (on branch imgstack):
=================================

In antenna_array.py,

(*) In member function stack() of class NewImage, check if the current
timestamp is included in the attribute timestamps and stack only if
not included
(*) In member function stack() of class NewImage, append current
timestamp onto to attribute timestamps after stacking

From ff40081 (on branch imgstack):
=================================

In antenna_array.py,

(*) Add and initialize attribute timestamps in __init__() member
function of class NewImage
(*) Reset attribute timestamp to None in reset() member function of
class NewImage
(*) Reassign attribute timestamp in update() member function of class
NewImage

From 0698f0b (branch imgstack):
==============================

In antenna_array.py,

(*) Add member function stack() (with docstring) to class NewImage

From ade3b10 (branch imgstack):
==============================

In antenna_array.py,

(*) Add and initialize new attributes holimg_stack, holbeam_stack,
img_stack, beam_stack, grid_illumination_stack, grid_Vf_stack in
__init__() member function of class NewImage

From 8c2f42c (branch imgstack):
==============================

In antenna_array.py,

(*) Add member function update() (with docstring) to class NewImage
(*) Update docstring of member function reset() of class NewImage

From d994199 (branch imgstack):
==============================

In antenna_array.py,

(*) Add member function reset() (with docstring) to class NewImage

From 48dd92c (branch imgstack):
==============================

In antenna_array.py,

(*) Rearrange order of initialization of some attributes in member
function __init__() of class NewImage
(*) Initialize grid_illumination, grid_wts, grid_Ef, and grid_Vf
attributes in __init__() member function of class NewImage to None
and move their real assignment into member function imagr()
(*) Move invocation of member functions make_grid_cube() and
make_grid_cube_new() of classes AntennaArray and InterferometerArray
from inside member function __init__() to member function imagr() of 
class NewImage

From a966b70 (branch imgstack):
==============================

In antenna_array.py,

(*) Add attributes antenna_array and interferometer_array to class
NewImage and initialize them in __init__() member function

From a898c04 (branch imgstack):
==============================

In antenna_array.py,

(*) Comment out the defunct class Image

From 5d8a0a8 (branch analytic-kernel):
=====================================

In antenna_array.py,

(*) To obtain attribute grid_Vf of class InterferometerArray,
include the multiplication of visibilities by the grid illumination
to obtain the gridded visibilities before imaging in member function
make_grid_cube_new(). This step was forgotten in earlier version.
This is a major bug fix that yields the correct amplitude scale for
the FX images
(*) To obtain attribute grid_Ef of class AntennaArray,
include the multiplication of electric fields by the grid illumination
to obtain the gridded electric fields before imaging in member 
function make_grid_cube_new(). This step was forgotten in earlier 
version. This is a major bug fix that yields the correct amplitude 
scale for the MOFF images

From a898c04 (branch analytic-kernel):
=====================================

Add main level script compare_simulations_MOFF_FX_test_aperture.py
to git repository (that was forgotten to be done earlier)

From ac6f78d:
============

In antenna_array.py,

(*) Create member function make_grid_cube_new() under class
InterferometerArray. Update class docstring
(*) In member function grid_convolve_new() of class
InterferometerArray, keep track of twts
(*) Fix bug in member function grid_convolve_new() of class
InterferometerArray while assigning bl_xy to value under key
'baselines' instead of the wrong key 'positions'
(*) Make zero spacing aperture kernel removal in member function
quick_beam_synthesis() of class AntennaArray remove the entire
kernel footprint instead of just the single pixel of exactly zero
spacing
(*) In member functions grid_convolve_new() and grid_convolve() of
classes AntennaArray and InterferometerArray use numpy squeeze() on
Ef and Vf respectively only on axis=0 to remove the preceding but
single length time dimension. This will now work even in case of a
single antenna or interferometer. Use squeeze() on twts on axes 0
and 2 to retain its antenna/baseline-axis

In aperture.py,

(*) In member function compute() of class Aperture, add support for
analytic kernel estimation for auto-convolved rect, square and
circular shapes

From 3f4a16b:
============

In antenna_array.py,

(*) Add and initialize attributes on antenna-to-grid mapping under
keys 'per_bl2grid' and 'all_bl2grid' as part of bigger attribute
dictionary grid_mapper in class InterferometerArray. Update docstring
of class InterferometerArray accordingly
(*) Create member function grid_convolve_new() for class
InterferometerArray and add a description in the class docstring
(*) Update docstring of class AntennaArray with description on
attribute grid_mapper with recently added keys 'per_ant2grid' and
'all_ant2grid'
(*) Update docstring of class AntennaArray describing member function
grid_convolve_new()
(*) These changes to classes Interferometer and InterferometerArray are
untested

From 70d1ce3:
============

In aperture.py,

(*) Change one of the accepted values of input parameter pol_type in 
member function __init__() of class Aperture from 'single' to 'dual'

In antenna_array.py,

(*) Update attribute aperture in update() member function of class
Interferometer. Update docstring accordingly
(*) Update interferometer and antenna attributes aperture through
update() member function of class InterferometerArray. Update
docstring accordingly
(*) Minor change in TypeError message in update() member function of
class Antenna
(*) Initialize attribute aperture in __init__() member function of
class Antenna by explicitly passing the input pol_type='dual'

From 4aee864:
============

In antenna_array.py,

(*) Add attribute aperture to class Interferometer
(*) Add input keyword aperture in __init__() member function of class
Interferometer to initialize attribute aperture
(*) Update docstring accordingly
(*) Add type checking while initializing attribute aperture in member
function __init__() of class Antenna

From 23d5910:
============

In antenna_array.py,

(*) Remove input keywords ants, mapping, tol, maxmatch from member 
function grid_convolve_new() of class AntennaArray and docstrings. 
Also remove code block concerning externally supplied ants and 
instead only work with antenna instances that are part of the antenna 
array instance
(*) Remove commented lines in member function make_grid_cube_new() of
class AntennaArray

From 1c1263f:
============

In aperture.py,

(*) Rename class AntennaAperture to simply Aperture and modify its
occurrences throughout the module. Update docstrings accordingly

In antenna_array.py,

(*) Rename occurrences of class AntennaAperture to simply Aperture.
Update docstrings accordingly
(*) In __init__() member function of class NewImage, replace call
to member function make_grid_cube() of class AntennaArray with
call to make_grid_cube_new()

From 090ab29:
============

In aperture.py,

(*) Add attribute pol to class AntennaAperture and initialize in
__init__() member function. Now the same class can work with single
polarizations like 'P1' and 'P2' or cross-polarizations like 'P11',
'P12', 'P21', and 'P22'
(*) Throughout class AntennaAperture modify value checking against
['P1', 'P2'] to that against attribute pol
(*) Update docstrings accordingly

From 200765b:
============

In aperture.py,

(*) Change docstrings throughout to also include newly added analytic
kernel functions auto_convolved_rect(), auto_convolved_square() and
auto_convolved_circular()
(*) In type checking for shape input in member function __init__() of
class AntennaAperture, include the aforementioned newly added analytic
kernel functions
(*) Modify docstrings throughout to indicate that the shape parameters
for the aforementioned newly added analytic kernels still describe the
original rectangle, square and circular apertures from which the
auto-convolutions are derived from

From d6b3cbc:
============

In aperture.py,

(*) Add function auto_convolved_rect() for analytic estimation of a
rectangular kernel convolved with itself
(*) Add function auto_convolved_square() for analytic estimation of a
square kernel convolved with itself
(*) Add function auto_convolved_circular() for analytic estimation of a
circular kernel convolved with itself
(*) Remove import of scipy.constants for the aperture module
(*) In function inputcheck(), return wavelength as an array with size
equal to the number of locations
(*) In function inputcheck(), pass rmin and rmax in call to function
parmscheck()

From ff893b8:
============

In aperture.py,

(*) Remove the use of xmin and ymin throughout the module. Instead
assume throughout that xmin=-xmax, ymin=-ymax. This includes functions
rect(), parmscheck(), inputcheck(), square() and class AntennaAperture
(*) Add more checking of xmax and ymax in functions parmscheck()
(*) Modify all docstrings in aperture module accordingly

From 25d7cac:
============

In aperture.py,

(*) Add lookup-based kernel estimation in member function compute()
of class AntennaAperture. Rename the returned value kern to outdict
and change the data structure of outdict. Update docstring accodingly
(*) Add input keyword load_lookup() to member functions __init__() and
compute() of class AntennaAperture. Update docstrings accordingly
(*) Add input rmaxNN to member function compute() of class
AntennaAperture as part of lookup funcitonality. Update docstring
accordingly
(*) Move reading of information in the lookup file to member function
compute() in class AntennaAperture
(*) In __init__() member function of class AntennaAperture, store
only lookup information filename instead of reading in the lookup
data.
(*) Correct docstring of member function __init__() of class
AntennaAperture with correct name of input parameter lkpinfo
which was earlier incorrectly named as lookup
(*) Update docstring of class AntennaAperture to accurately reflect
its attributes and member functions

In antenna_array.py,

(*) Pass rmaxNN in call to compute() member function of class
AntennaAperture from inside member function grid_convolve_new() of
class AntennaArray
(*) Pass load_lookup in call to compute() member function of class
AntennaAperture from inside member function grid_convolve_new() of
class AntennaArray

From 4279b67:
============

In antenna_array.py,

(*) Add keys 'per_ant2grid' and 'all_ant2grid' to attribute
grid_mapper of class AntennaArray. The value under key 'all_ant2grid'
is a dictionary consisting of keys 'antind', 'u_gridind', 'v_gridind',
'f_gridind', 'Ef', 'illumination', 'per_ant_per_freq_norm_wts'. The
value under ley 'per_ant2grid' is a list of dictionaries where each
dictionary consists of the following keys - 'label', 'f_gridind',
'u_gridind', 'v_gridind', 'per_ant_per_freq_norm_wts', 'illumination',
'Ef'. The top level keys are initialized in __init__() member function
of class AntennaArray
(*) Create member function grid_convolve_new() for class
AntennaArray for handling analytic kernel estimation making use of
the aforementioned new attributes
(*) Create member function make_grid_cube_new() for class
AntennaArray for making a grid cube using analytic kernel estimate

In aperture.py,

(*) Fix indexing issues while calculating kernel in circular() and
rect() 

From 5bb23ec:
============

In antenna_array.py,

(*) Update attribute aperture in member function update() of class
Antenna by including it as one of the values passed through
the input dictionary update_dict. Update docstring accordingly
(*) Pass aperture update through one of the dictionary keys under
the key 'antennas' in the updates dictionary input of member function
update() of class AntennaArray which inside the member function is
passed to update() member function of class Antenna. Update docstring
accordingly

In changelog_MOFF.txt,

(*) Insert a log on the previous commit which was missed earlier
related to import of lookup_operations module

From 2c41e0a:
============

In aperture.py,

(*) Import lookup_operations module
(*) Add attributes wtsxy, wtsposxy to class AntennaAperture. 
(*) Initialize new attributes wtsxy and wtsposxy in __init__()
member function of class AntennaAperture by adding input keyword
lkpinfo
(*) Modify docstrings accordingly

In antenna_array.py,

(*) Minor change to docstring of member function update() of class
Antenna

From fb53e3a:
============

In antenna_array.py,

(*) Import module aperture
(*) Add input keyword aperture in __init__() member function of
class Antenna. This keyword will provide the initialization with
an instance of class AntennaAperture into an attribute named
aperture
(*) Change docstring accordingly

From a8fa375:
============

In aperture.py,

(*) Add class AntennaAperture with member functions __init__() and
compute() with corresponding docstrings
(*) Add function parmscheck() to check aperture shape parameters
like xmin, xmax, ymin, ymax, rmin, rmax, rotangle and phase_center.
Remove checking of these parameters from inputcheck() and instead
invoke parmscheck() to verify these parameters

From 8dc6512:
============

In aperture.py,

(*) Add function circular() (with docstring) to create a uniform 
circular aperture illumination
(*) Fix bug in estimating kernel at valid indices in rect()
(*) Add description of output to docstring of function square()

From 4957346:
============

In aperture.py,

(*) Add function square() (with docstring) to create a uniform square
aperture illumination
(*) Tidy up and update missing information in docstring of function
rect()
>>>>>>> master

From ef4576a:
============

<<<<<<< HEAD
(*) Created new cal_devel branch for development of calibration capabilities
(*) Changed cal script to actually mix up the data with "unknown" gains
(*) Added option to calibrate by either dividing by gains, or by multiplying
by conjugate of gains.
(*) Moved file beardsley.py -> simple_cal_script.py

=======
Add new module aperture.py to repository

In aperture.py,

(*) Add function inputcheck() (with docstring) to check inputs
(*) Add function rect() (with docstring) to create a uniform
rectangular aperture illumination
>>>>>>> master

From 88f97d5:
============

In changelog_MOFF.txt,

(*) Update with missed logs during the pull request merge,
specifically following f9a1d9f and 88f97d5

From f9a1d9f:
============

Merge Adam's pull request into FX-accumulate branch

From 6e802d8:
============

In antenna_array.py,

(*) Fix bug while assigning attributes gridl and gridm based on
padding in member function imagr() of class NewImage
(*) Comment out printing of process name in parallel processing
in functions antenna_grid_mapping(), antenna_grid_mapper(),
baseline_grid_mapping() and baseline_grid_mapper()

From 631e2ca:
============

In antenna_array.py,

(*) Add input keyword pad in member function imagr() of class
NewImage that gives the option to turn on/off the padding of
antenna/interferometer array grid before imaging. Update docstring
accordingly
(*) remove few commented statements in member function imagr() of
class NewImage

From 4b52f31:
============

In antenna_array.py,

(*) Fix bug in computation of mean of MOFF beam and image in imagr()
member function of class NewImage. Earlier the mean was estimated
from the entire band instead of being done on a per-channel basis.

From 6df795f:
============

In antenna_array.py,

(*) Add attributes holimg and holbeam to class NewImage and
initialize them in __init__() member function. The real assignment
occurs in member function imagr()
(*) Produce images in imagr() after padding the uv-grid by factors
4 and 2 respectively for electric field and visibility data
(*) Fix bug in imagr() while using electric fields where only the
real part was getting selected in the holographic image and beam
(*) In member functions quick_beam_synthesis() of classes
AntennaArray and InterferometerArray ensure the fftshift and
ifftshift applies only to axes 0 and 1

From bf1af33:
============

In changelog_MOFF.txt,

(*) Update hashtags after rebasing Adam's commit #e97804b in the 
remote repository to branch FX-accumulate. The rebasing changed the 
hashtags of some previous commits. The old hashtags are now mentioned 
in parenthesis below.

From e7a5b26 (2580912):
============

In antenna_array.py,

(*) Add member functions quick_beam_synthesis() to classes 
AntennaArray and InterferometerArray. Tested successfully. Update
docstring of classes with descriptions of this member function
(*) Add input keyword centering to member function antenna_positions()
of class AntennaArray. Update docstring accordingly
(*) In member function grid_convolve() of class AntennaArray, modify
call to member function antenna_positions() using the input keyword
centering set to True
(*) Remove input keyword pol in member functions grid() of classes
AntennaArray and InterferometerArray

From b9305d8 (25c3db0):
============

In antenna_array.py,

(*) Add attribute antenna_center to class AntennaArray. Initialize it
in __init__() member function and assign it in member funciton grid().
Update docstring accordingly
(*) Remove unused attributes gridx and gridy of class AntennaArray
from __init__() member function. Update docstring accordingly
(*) Update docstring of class AntennaArray and its __init__() member
function to accurately reflect current attributes

From 252e69e (1889952):
============

In antenna_array.py,

(*) Subtract the geometric center of the antenna array locations from
BLC and TRC computation inside member function grid() of class
AntennaArray
(*) Change input keyword uvpad to xypad in member function grid() of
class AntennaArray. Change docstring accordingly

From d694652:
============

In antenna_array.py,

(*) Modify docstring of member function antenna_positions() of class
AntennaArray to indicate the labels returned are in a list of strings
(*) Modify docstring of member function baseline_vectors() of class
InterferometerArray to indicate the labels returned are in a list of
tuples of antenna labels

From 9528c79:
============

In antenna_array.py,

(*) Compute gridded illumination and visibilities ignoring twts in
member function make_grid_cube() of class InterferometerArray
(*) Minor changes to widths of bounding lines and docstrings to be
less than 80-characters wide
(*) Remove commented and deprecated classes PolInfo_old, Antenna_old
and AntennaArray_old

From 6d5890b:
============

In antenna_array.py,

(*) Add new attribute caldata to class AntennaArray to carry
information about calibrated antenna data and initialize in
__init__() member function. Update docstring accordingly
(*) Add input keyword cal_loop in the arguments list of member
function grid_convolve() of class InterferometerArray to indicate
if the calibration loop is ON or OFF. Update docstring of this
member function accordingly
(*) Update/refresh attribute caldata inside member function
grid_convolve() of class AntennaArray depending on whether the
calibration loop is ON/OFF as indicated by input keyword cal_loop 

From bb2686e:
============

In antenna_array.py,

(*) Correct variables num_flagged and sum_wts to num_unflagged and
sum_twts respectively in member function make_grid_cube() in class
InterferometerArray
(*) Update docstring for change one of the keys under attribute 
grid_mapper of classes AntennaArray and InterferometerArray from
'flag' to 'twts'

From 456c73a:
============

In antenna_array.py,

(*) Modify member function grid_convolve() of class
InterferometerArray to account for weights from time-based flags 
('twts') to be applied in make_grid_cube() member function of the
same class
(*) Modify member function make_grid_cube() of class
InterferometerArray to account for weights from time-based flags 
('twts') to be applied while estimating grid visibilities.
(*) Modify member function grid_convolve() of class
AntennaArray to account for weights from time-based flags 
('twts') to be applied later
(*) Bug fix in member function antenna_positions() of class
AntennaArray to return the labels and positions in the same order as
that returned by member function get_E_fields() of the same class.
Earlier antenna_positions() returned labels sorted by "first antenna
label" when one only one antenna label existed in each label and was
copied from a similar member function from class InterferometerArray
without appropriate corrections. Now tested to work fine using the
script LWA_MOFF_data_analysis.py

From 02a8d60:
============

In antenna_array.py,

(*) Replace occurrences of tflags in member functions get_E_fields()
in classes Antenna and AntennaArray with twts and change the 
respective docstrings accordingly

From 0c5fe73:
============

In antenna_array.py,

(*) Update docstring of class AntennaArray with information on
attribute grid_mapper

From 1d9ccd2:
============

In antenna_array.py,

(*) Add member function get_E_fields() to class Antenna. Update
docstring of class Antenna accordingly
(*) Rename member function get_E_fields() of class AntennaArray to
get_E_fields_old() and replace occurrences throughout
(*) Create a new generic member function get_E_fields() of class
AntennaArra that has generic selection criteria. Test for accurate
functionality. Update docstring of class AntennaArray accordingly
(*) Make minor change to docstring of class get_visibilities() of
class Interferometer
(*) Use input keyword datapool='avg' in call to member function
get_visibilities() of class InterferometerArray from inside member
function grid_convolve() of class InterferometerArray
(*) Add a description of member function make_grid_cube() to the
docstring of its parent class AntennaArray

From cd80593:
============

In antenna_array.py,

(*) Rename member function get_visibilities() of class Interferometer
to get_visibilities_old() and replace occurrences throughout
(*) Create a new generic member function get_visibilities() of class
Interferometer that has generic selection criteria and has been
tested. Update docstring of class InterferometerArray accordingly
(*) Modify output dimensions of visibilities under key 'visibilities'
in output dictionary in member function get_visibilities() of class
Interferometer. Update docstring of member function
get_visibilities() of class Interferometer accordingly
(*) Modify invocation of get_visibilities() of class
InterferometerArray from inside grid_convolve() of the same class to
be compatible with the changes to get_visibilities() member function
specified in this revision

From dd639f7:
============

In antenna_array.py,

(*) Create member function get_visibilities() under class
Interferometer. Update docstring of class Interferometer accordingly
(*) Change default value of input keyword flag from False to None in
member function get_visibilities() of class InterferometerArray
(*) Initialize existing attributes Vf_avg and twts to None under each
polarization key in __init__() member function of class
InterferometerArray

From 19ac0ad:
============

In antenna_array.py,

(*) Add member function accumulate() under class InterferometerArray.
Update docstring of class InterferometerArray accordingly
(*) Inside member function accumulate() of class Interferometer,
convert attribute twts to be floating point numbers from integers

From 9ac36de:
============

In antenna_array.py,

(*) In member functions f2t_on_stack() and t2f_on_stack() of class
Interferometer, change input keyword variable from axis to ax in call
to DSP.FT1D()
(*) Add script LWA_FX_stack_data_analysis.py to git repository
(*) Test stacking of interferometer array data works under both serial
and parallel processing using the script LWA_FX_stack_data_analysis.py

From a0a843f:
============

In antenna_array.py,

(*) Create member function stack() under class InterferometerArray.
Update docstring of class InterferometerArray accordingly
(*) Create member function stack_pp() as a wrapper for member
function stack() of class Interferometer in case of parallel
processing
(*) Create function unwrap_interferometer_stack() for parallel
processing of interferometer data and flag stacking

From b34eea3:
============

In antenna_array.py,

(*) Create member function stack() under class Interferometer. Update
docstring of class Interferometer accordingly
(*) Remove assignment of attribute timestamps inside member functions
FX_on_stack() and XF_on_stack() of class Interferometer

From 81071a1:
============

In antenna_array.py,

(*) Create member function flags_on_stack() for class Interferometer
to compute visibility flags from time-stacked electric fields from
the common timestamps between the pair of antennas. Update docstring
of class Interferometer accordingly

From 7e31571:
============

In antenna_array.py,

(*) Create member function XF_on_stack() for class Interferometer
to convert time-stacked electric fields time series to visibility
spectra. Currently it will not work because the underlying correlate()
function of numpy only supports 1D arrays. Needs serious development.
Modify docstring of class Interferometer accordingly

From c2956de:
============

In antenna_array.py,

(*) Create member function t2f_on_stack() under class Interferometer
to compute visibility spectra from time-stacked visibility lags.
Update docstring of class Interferometer accordingly
(*) Minor change to docstring of f2t_on_stack() member function of
class Interferometer and correspondingly in the docstring of class
Interferometer

From 3055040:
============

In antenna_array.py,

(*) Create member function f2t_on_stack() under class Interferometer
to compute visibility lags from time-stacked visibility spectra.
Update docstring of class Interferometer accordingly
(*) Assign timestamps common to the two antennas to the attribute
timestamps of class Interferometer inside FX_on_stack() member
function of the same class
(*) Use f2t_on_stack() member function of class Interferometer created
above inside FX_on_stack() member function of the same class to
compute visibility lags from a time-stacked visibility spectra

From f4c4ce3:
============

In antenna_array.py,

(*) Create member function FX_on_stack() for class Interferometer that
can compute time-stacked FX visibility spectra from time-stacked
electric field spectra in the individual antennas in the antenna pair.
Update docstring of class Interferometer accordingly

From 34873a2:
============

In antenna_array.py,

(*) Add member function refresh_antenna_pairs() to class
Interferometer to refresh the individual antenna pairs with
the antenna information provided. Modify docstring of class
Interferometer accordingly
(*) Add member function refresh_antenna_pairs() to class
InterferometerArray to refresh the individual antenna pairs with
the antenna information in the attribute antenna_array. This invokes
the member function refresh_antenna_pairs() of individual
interferometers created above. Modify docstring of class
InterferometerArray accordingly
(*) In class InterferometerArray, from member function update()
call member function refresh_antenna_pairs() immediately after
updating antenna level information
(*) Comment out defunct classes PolInfo_old, Antenna_old, and
AntennaaArray_old
(*) Update outdated docstring of member function update() of class
InterferometerArray to accurately reflect the inputs
(*) Add key 'stack' under keys 'antennas' and 'interferometers' of
input dictionaries antenna_level_updates and
interferometer_level_updates in member function update() of class
InterferometerArray. Change docstring accordingly
(*) Modify update() member function of class InterferometerArray to 
pass keyword stack while updating the individual interferometer
attributes
(*) Remove inappropriate stack actions from member function
update_flags() of class CrossPolInfo
(*) Add progressbar inside update() member function of class
InterferometerArray
(*) Fix bug in progressbar in member function make_grid_cube() of
class AntennaArray when verbose keyword is not set
(*) Comment out a line in update() member function of class
InterferometerArray that used update_old() member function of class
Interferometer
(*) Add internal attribute __init_flags_on to class CrossPolInfo to
keep track of first time the flags are really updated. Change
docstring of member function __init__() of class CrossPolInfo
accordingly
(*) Add internal attribute __init_data_on to class CrossPolInfo to
keep track of first time the data are really updated. Change
docstring of member function __init__() of class CrossPolInfo
accordingly
(*) Modify updating the cross-polarization products inside member
function update() of class Interferometer without an 'if' condition
(*) Modify member functions update_flags() in classes CrossPolInfo
and Interferometer now accounting for first time updates using the
internal attribute _init_flags_on of class CrossPolInfo
(*) Modify member functions update_flags() in classes Interferometer
to loop through different polarizations using dictionary comprehension
during flag initialization
(*) Minor change to correct docstring of member function
update_flags() of class CrossPolInfo
(*) Modify verify actions inside member function update_flags() of
class Interferometer
(*) Modify inside member function update() of class
InterferometerArray the call to update_flags() of the same class
after updating at the antenna array level
(*) Slight increase in verbosity of member function update() of
class InterferometerArray
(*) Make flag stacking not append the most recent flag to the end
of the stack if the stack is empty and input keyword stack is set to
False in update_flags() member function of class Interferometer
(*) Make visibility stacking not append the most recent data to the
end of the stack if stack is empty and input keyword stack is set to
False in update() member function of class Interferometer
(*) Make the call to update_flags() member function of class
Interferometer from member function update() also of the same class
to now appear conditionally only if do_correlate is set inside the
update() member function
(*) Verify flags in update_flags() member function of class
CrossPolInfo only if internal attribute _init_data_on is set to False
(*) Set internal attribute _init_data_on to False in member function
update() of class CrossPolInfo when input Vf and/or Vt is provided
(*) Set internal attribute _init_data_on to False in member functions
FX() and FX_pp() of class Interferometer whenever FX is performed
(*) Set internal attribute _init_data_on to False in member functions
XF() of class Interferometer whenever XF is performed
(*) Move call to update_flags() inside member functions FX(), FX_pp()
and XF() of class Interferometer towards the end of the block and
with explicit arguments flags=None, stack=False and verify=True
(*) Comment out the separate call for FX() or XF() of class
InterferometerArray based on the input flag do_correlate at the end
of the block inside update() member function of class
InterferometerArray. Instead use the do_correlate flag inside the
individual interferometer update dictionary. This avoids many
recursive calls and conflicts between flag stacking, flag verification
and data stacking.
(*) In member function update() of class Interferometer, if the
dictionary key 'do_correlate' is set to 'FX' or 'XF', since the FX()
or XF() both perform a flag verification after determining the
visibilities, the call to update_flags() following the call to FX()
or XF() is only used to stack flags and not for redundant verification
(*) Update docstring of member function FX() of class
InterferometerArray to include description on input keywords parallel
nproc
(*) Update docstring of member function update() of class
InterferometerArray to include description on input keywords parallel
nproc

From 575447c:
============

In antenna_array.py,

(*) Update docstring description of input keyword 'stack' in update()
member functions of classes Antenna and Interferometer
(*) Add key 'stack' under key 'antennas' of input dictionary updates
in member function update() of class AntennaArray
(*) Modify update() member function of class AntennaArray to pass
keyword stack while updating the individual antenna attributes
(*) Test stacking at antenna level which is found to work

From a48e77c:
============

In antenna_array.py,

(*) Fix bug in member function update_flags() of classes Antenna and
Interferometer to convert the first entry into attribute flag_stack 
from a boolean scalar to a boolean numpy array
(*) Add stack and verify input keywrods to member function
update_flags() of class InterferometerArray
(*) Fix bug in function definition of member function update_flags()
of class Interferometer
(*) Call update_flags() member function of class Antenna from inside
update_flags() member function of class AntennaArray instead of
calling the one under class PolInfo directly
(*) Call update_flags() member function of class Interferometer from 
inside update_flags() member function of class InterferometerArray 
instead of calling the one under class CrossPolInfo directly

From 26cac81:
============

In antenna_array.py,

(*) Update member function update() of class Interferometer by
combining an earlier range of inputs to a single input dictionary
called update_dict. Change docstring accordingly. This is on lines
similar to update() member function of class Antenna
(*) Update member function update_pp() of class Interferometer to
now act as a simple wrapper of member function update(). Change
docstring accordingly.
(*) Modify update() member function of class InterferometerArray to
call the modified member function update() of class Interferometer
with appropriate inputs
(*) Renamed the previous versions of these modified member functions
of class Interferometer with a suffix '_old' and will be removed in
future revisions after the modified versions are verified to work

From 93e1746:
============

In antenna_array.py,

(*) Accumulate and average only unflagged visibilities in member
function accumulate() of class Interferometer
(*) Trim some commented lines to within 80 characters

From ebe643a:
============

In antenna_array.py,

(*) Rename member function FX_new() to FX_pp() of class 
Interferometer. Update docstring of class Interferometer accordingly
(*) Replace all occurrences of FX_new() with FX_pp() throughout
including inside unwrap_interferometer_FX()
(*) Rename member function FT_new() to FT_pp() of class Antenna.
Update docstring of class Antenna accordingly
(*) Replace all occurrences of FT_new() with FT_pp() throughout
including inside unwrap_antenna_FT()
(*) Rename member function update_new() to update_pp() of classes
Antenna and Interferometer. Update docstrings of classes Antenna and
Interferometer accordingly
(*) Replace all occurrences of update_new() with update_pp() throughout
including inside unwrap_interferometer_update() and
unwrap_antenna_update()

From 6a239ea:
============

In antenna_array.py,

(*) Update docstring of member function update() of class Antenna
(*) Update docstring of class Antenna to include descriptions of
member functions FT(), FT_new(), and update_new()
(*) Minor change to docstring of meber function delay_compensation(),
FT(), update() of class PolInfo
(*) Update docstring of class PolInfo to include descriptions of
member functions FT(), update_flags() 
(*) Minor change to docstring of class CrossPolInfo

From 98c9abc:
============

In antenna_array.py,

(*) Add attributes Vf_avg, twts, tbinsize to class Interferometer and
initialize them in __init__() member function. Modify docstring
accordingly
(*) Add member function accumulate() to class Interferometer to
accumulate and average visibilities. Create an appropriate docstring.
(*) Modify docstring of class Interferometer to include description on
member function accumulate()
(*) Update docstring of member function update_new() of class
Interferometer
(*) Modify docstring of class Interferometer to include description on
member function update_new()
(*) Update docstring of member function FX_new() of class
Interferometer
(*) Modify docstring of class Interferometer to include description on
member function FX_new()

From 2f23075:
============

In antenna_array.py,

(*) Remove commented lines on stacking in classes CrossPolInfo and
PolInfo

From 1a50cb3:
============

In antenna_array.py,

(*) Remove input keyword stack and comment stacking lines from
member functions FT() and FT_new() of class Antenna. Modify
docstring accordingly
(*) Reactivate discontinued member function update_flags() of class
Antenna and add input keywords stack and verify and stacking
functionality. Modify docstring accordingly
(*) Remove keyword input stack and commented stacking lines from
member function FX() of class Interferometer. Change docstring
accordingly
(*) Modify update() member functions of class Antenna to perform flag
and data stacking, and flag verification
(*) Add visibility stacking inside update() member function of class
Interferometer which was missing this earlier
(*) Modify docstring of member function update_new() of class
Interferometer
(*) Fix minor bugs in initialization of inputs stack and verify_flags 
in member function update_new() of class Interferometer

From b2dc205:
============

In antenna_array.py,

(*) Comment out stacking in class PolInfo and its docstrings as well
as stacking will be moved to class Antenna in future commits

From c74fc02:
============

In antenna_array.py,

(*) Remove attributes Et_stack, Ef_stack, and flag_stack from class
PolInfo and insert them under class Antenna. Change the respective
__init__() member functions and docstrings accordingly
(*) Minor change to docstring of member function __init__() of class
Interferometer

From f96d15d:
============

In antenna_array.py,

(*) Modify update_new() member function of class Interferometer to 
proceed only if timestamp aligns with that of both antennas
(*) Modify update_new() member function of class Interferometer to 
update visibility and flag stacking
(*) Update docstring accordingly in member functions update() and
update_new() of class Interferometer

From aeea7df:
============

In antenna_array.py,

(*) Modify attribute timestamps from being a dictionary to be a list
in class Interferometer. Modify __init__() member function and
docstring accordingly
(*) Modify update() member function of class Interferometer to proceed
only if timestamp aligns with that of both antennas
(*) Modify update() member function of class Interferometer to update
visibility and flag stacking

From 34c9b98:
============

In antenna_array.py,

(*) Add keyword inputs verify and stack to member function
update_flags() of class Interferometer to perform flag verification
and stacking respectively. Change docstring accordingly
(*) Change default assignment of flags to False with a migration of
current values of flags inside member function update_flags() of class
Interferometer
(*) Change default value of input keyword verify from False to True
in member function update_flags() of class CrossPolInfo. Change
docstring accordingly

From c55195f:
============

In antenna_array.py,

(*) Remove attributes Vt_stack, Vf_stack, and flag_stack from class
CrossPolInfo and insert them under class Interferometer. Change the
respective __init__() member functions and docstrings accordingly
(*) Remove stack keyword input and stacking procedure from member
functions update() and update_flags() of class CrossPolInfo. Change
docstring accordingly

From 093042e:
============

In antenna_array.py,

(*) Fix bug by initialization of correct variables in member function
__init__() of class CrossPolInfo
(*) Minor change in docstring of class CrossPolInfo
(*) Fix bug in polarizations in member function update_flags() of
class CrossPolInfo

From 3587025:
===========

In antenna_array.py,

(*) Add keyword inputs stack and verify to member function update()
of class CrossPolInfo
(*) Add stack handling functionality to member function update() of
class CrossPolInfo
(*) Modify slightly member function update() of class CrossPolInfo
(*) Update docstring of member function update() of class CrossPolInfo
accordingly
(*) Minor modifications inside member function update() of class
PolInfo

From 00c23e1:
============

In antenna_array.py,

(*) Add input keywords stack and verify to member function 
update_flags() of class CrossPolInfo. Modify docstring accordingly

From d7a20cc:
============

In antenna_array.py,

(*) Comment out redundant member function update_flags() of class
Antenna and replace its occurrence throughout classes Antenna and
AntennaArray by direct use of the member function update_flags() of
class PolInfo
(*) Add keyword input stack to member function update_flags() of class
AntennaArray. Update docstring accordingly
(*) In member function update() of class AntennaArray, modify the
invocation of member function update_flags() of class AntennaArray
to now use the keyword input stack set to False
(*) Modify stacking of flags in member function update_flags() of
class PolInfo
(*) Add input keyword verify to member function update_flags() of
class PolInfo. Modify docstring accordingly
(*) Add input keyword verify to member function update() of class
PolInfo. Modify docstring accordingly
(*) Add type checking of input keywords stack and verify inside
member function update_flags() of class PolInfo
(*) Pass keyword input verify set to False while calling member
function update_flags() of class PolInfo from inside member function
update() of class PolInfo
(*) Make changes in member function update_flags() and update() of
class AntennaArray to be compatible with changes above

From b8dab4f:
============

In antenna_array.py,

(*) Add attributes Vt_stack, Vf_stack, flag_stack to class
CrossPolInfo and initialize them in __init__()
(*) Add corresponding description in docstring

From d6bed3b:
============

In antenna_array.py,

(*) Add and initialize attribute timestamps in member function
__init__() of class Interferometer
(*) Update docstring accordingly

From 3a2a05f:
============

In antenna_array.py,

(*) Change initialization of attribute flag_stack in member function
__init__() of class PolInfo
(*) Modify updating of flag stacking in member function update_flags()
of class PolInfo
(*) Modify updating of Et and flag stacking in member function
update() of class Antenna

From 6b9fd5c:
============

In antenna_array.py,

(*) Change initialization of attributes Et_stack, Ef_stack in member
function __init__() of class PolInfo
(*) Modify updating of attributes Et_stack and Ef_stack in member
function update() of class PolInfo

From 530e131:
============

In antenna_array.py,

(*) Handle stacking of flags in update_flags() member function of
class AntennaArray
(*) Stack timestamps in update() member function of class AntennaArray

From 94ca972:
============

In antenna_array.py,

(*) Add and initialize attribute timestamps in __init__() member
function of class AntennaArray
(*) Update docstring with description on attributes timestamp and
timestamps which was missing earlier
(*) Update docstring of member function __init__() of class
AntennaArray with description on keyword input antenna_array
(*) Minor change in update() member function of class Antenna while
updating attribute timestamps

From d21c854:
============

In antenna_array.py,

(*) Update attribute timestamps in member function update() of
class Antenna
(*) Invoke stack keyword input inside member function update() of
class Antenna while updating flags and attributes by calling update()
and update_flags() of class PolInfo

From ae80d05:
============

In antenna_array.py,

(*) Add stack as input keyword to member functions FT(), FT_new()
and update_flags() of class Antenna
(*) Update docstrings of member function FT() of class PolInfo and
member functions FT(), FT_new() and update_flags() of class Antenna
(*) Minor inconsequential change in member function FT() of class
PolInfo

From 2bb06f1:
============

In antenna_array.py,

(*) Add and initialize attribute timestamps in __init__() member
function of class Antenna to hold stack of timestamps

From 84fc365:
============

In antenna_array.py,

(*) Add stacking functionality to member function update() of class
PolInfo
(*) Modify previous block slightly to accommodate new functionality
(*) Modify docstring accordingly

From f963850:
============

In antenna_array.py,

(*) Add flag stacking functionality in update_flags() member function
of class PolInfo
(*) Modify docstring accordingly

From b8a43e8:
============

In antenna_array.py,

(*) Add Fourier transform functionality on stacked electric field
time series in FT() member function of class PolInfo. Modify docstring
accordingly

From d8d7d70:
============

In antenna_array.py,

(*) Fix bug in printing flags in __str__() member function of class
PolInfo

From 8e5a19b:
============

In antenna_array.py,

(*) Add attributes Et_stack, Ef_stack, flag_stack to class PolInfo
and initialize them in __init__()
(*) Add corresponding description in docstring

From 89b28e3:
============

Added a FX data analysis script LWA_FX_data_analysis.py equivalent
to LWA_MOFF_data_analysis.py but is untested unlike the latter.
Committing just to switch focus on another development

From 224f6dc:
============

In antenna_array.py,

(*) Change condition check on nproc to call multiprocessing pool()
with appropriate input

From cd12fcd:
============

In antenna_array.py,

(*) Remove usage of 'flag' key in attribute grid_mapper in classes 
AntennaArray and InterferometerArray
(*) In member function make_grid_cube() of classes InterferometerArray
and AntennaArray, use attributes interferometers and antennas
respectively to retrieve flagging information rather than from the
attribute grid_mapper which does not get updates on flags in every
iteration

Create new main programs to test out the new module in data_interface.py

From 4aa2abe:
============

In data_interface.py,

(*) Add docstring to class DataHandler and its member functions
__init__() and save()

From b5e02d3:
============

In data_interface.py,

(*) Add member function save() to class DataHandler
(*) Make changes to __init__() member function of class DataHandler

From 4a32225:
============

In data_interface.py,

(*) Add __init__() method to class DataHandler

From 63da73a:
============

Start building new module under data_interface.py for interfacing
various data products to a common data format

From 9216289:
============

Add new_MOFF_testing_LWA.py to git version control

In antenna_array.py,

(*) Change docstrings to be more accurate
(*) Make update() member function of class Antenna handle update to
delay compensation which was not done earlier
(*) Fix ProgressBar bug in member function grid_convolve() of classes
AntennaArray and InterferometerArray
(*) Change behaviour of ProgressBar throughout

From 5b8601b:
============

In antenna_array.py,

(*) Clean up unused commented lines of code

From 0f09325:
============

In antenna_array.py,

(*) Check similarity of images from MOFF and FX
(*) Yet to test exact amplitudes

From b53f0a3:
============

In antenna_array.py,

(*) Fix ProgressBar bug in member function grid_convolve() of classes
AntennaArray and InterferometerArray

From f6a5fde:
============

In antenna_array.py,

(*) Make update_flags() member function of class Interferometer to be 
compatible with new Antenna class

From 2197714:
============

In antenna_array.py,

(*) Make XF() member function of class Interferometer to be 
compatible with new PolInfo and Antenna classes
(*) Fix bug in FX() and FX_new() of class Interferometer by
changing antenna instance polarization attribute from pol to antpol

From 1ce9756:
============

In antenna_array.py,

(*) Make FX_new() member function of class Interferometer to be 
compatible with new PolInfo and Antenna classes

From f5df64e:
============

In antenna_array.py,

(*) Make FX() member function of class Interferometer to be compatible 
with new PolInfo and Antenna classes

From 7b6d837:
============

In antenna_array.py,

(*) Fix bug in get_E_fields() member function of class AntennaArray by
listing polarization strings separated by comma
(*) Fix bug in reading queue outputs from parallel processing in
member function grid_convolve() of classes InterferometerArray and
AntennaArray
(*) Modify __init__() of class NewImage to be compatible with changes
to class AntennaArray
(*) Modify imagr() of class NewImage to be compatible with changes
to class AntennaArray
(*) Fix bug in update() member function of class AntennaArray where
update_flags() was not called

From 4989a55:
============

In antenna_array.py,

(*) Add input parameters parallel and nproc to member function update()
of class AntennaArray
(*) Fix bug in update() member function of class Antenna by removing
do_correlate statement(s)
(*) Fix docstring throughout by replacing nprocs with nproc
(*) Test update() member function of classes AntennaArray and Antenna
in both serial and parallel processing scenarios

From 380833d:
============

In antenna_array.py,

(*) Fix a bug in member function __add__() of class AntennaArray and
AntennaArray_old
(*) Test __init__() of classes Antenna and AntennaArray
(*) Comment out undeveloped class AntennaPair

Add new_MOFF_testing_MWA.py to git

From fdf6c25:
============

In antenna_array.py,

(*) Update docstring in classes InterferometerArray and AntennaArray

From 4483e7f:
============

In antenna_array.py,

(*) Add update_new() method to class Antenna as a wrapper to update()
method when using parallel processing. Add basic docstring
(*) Add unwrap_antenna_update() to enable parallel processing during
gridding convolution of antenna kernels
(*) Move feature of returning updated instance from update() to
update_new() in class Antenna

From 30bb3dd:
============

In antenna_array.py,

(*) Add member function update() to class AntennaArray with basic
docstring

From 3f66e8a:
============

In antenna-array.py,

(*) Fix bug by changing use of attribute crosspol to antpol in member 
function update_flags() of class AntennaArray

From feee1bb:
============

In antenna_array.py,

(*) Add member function update_flags() to class AntennaArray

From 459b4c5:
============

In antenna_array.py,

(*) Add member function make_grid_cube() to class AntennaArray

From 8a996c5:
============

In antenna_array.py,

(*) Add functions antenna_grid_mapping_arg_splitter(), 
antenna_grid_mapping() and antenna_grid_mapper() to enable parallel
processing during gridding convolution of antenna kernels

From d4bb9c7:
============

In antenna_array.py,

(*) Add member function grid_convolve() to class AntennaArray

From aac7ff5:
============

In antenna_array.py,

(*) Add member function get_E_fields() to class AntennaArray
(*) Fix bug by changing use of attribute crosspol to antpol in member
function antenna_positions() of class AntennaArray

From 1d268cc:
============

In antenna_array.py,

(*) Add member function antenna_positions() to class AntennaArray

From 194b1ba:
============

In antenna_array.py,

(*) Add member function grid() to class AntennaArray

From 600336c:
============

In antenna_array.py,

(*) Add member function FT() to classes AntennaArray and Antenna and 
member function FX_new() to class Interferometer
(*) Add an unwrapping function unwrap_antenna_FT() to enable parallel
processing

From b63de09:
============

In antenna_array.py,

(*) Rename member function temporal_F() in class PolInfo to FT() 

From 37f760c:
============

In antenna_array.py,

(*) Start rewriting class AntennaArray
(*) Add member function __init__() to class AntennaArray
(*) Add member functions __add__(), __radd__(), __sub__(),
add_antennas(), and remove_atennas() to class AntennaArray
(*) Update docstring of class InterferometerArray

From 8e1668a:
============

In antenna_array.py,

(*) Add member function update() to class Antenna to update the antenna
information, with basic docstring

From 3aa5bd8:
============

In antenna_array.py,

(*) Add member function update_flags() to class Antenna to update flags
on the antenna polarizations, with basic docstring

From 519e61b:
============

In antenna_array.py,

(*) Add member function channels() to class Antenna to determine the
frequencies of the channels. Add basic docstring.

From 81f8d3a:
============

In antenna_array.py,

(*) Add member function __str__() to class Antenna to print brief
summary of the information held by an instance of this class

From 9ca0421:
============

In antenna_array.py,

(*) Start a new class Antenna to hold antenna level information and 
procedures with a preliminary docstring
(*) Wrote an __init__() member function with basic docstring

From c2568ce:
============

In antenna_array.py,

(*) Modify member function update() of class PolInfo to update the
spectrum automatically after updating the time series, and also be able
to update the delay compensation with a new input parameter delaydict. 
Modify docstring accordingly.

From c2c901a:
============

In antenna_array.py,

(*) Add member function update() to class PolInfo to update the electric
field time series, spectra and flags. Add basic docstring

From 2d81656:
============

In antenna_array.py,

(*) Add member function update_flags() to class PolInfo to update the
current flags. Add basic docstring

From 8ab5bae:
============

In antenna_array.py,

(*) Add member function delay_compensation() to class PolInfo to apply
delay compensation through phases in the electric field spectra. Add
basic docstring

From 014cf99:
============

In antenna_array.py,

(*) Add member function temporal_F() to class PolInfo to compute
electric field spectrum from time series, with basic docstring

From 6609d93:
============

In antenna_array.py,

(*) Add member function __str__() to class PolInfo to print brief 
summary of the information held by an instance of this class

From 1ffbd9b:
============

In antenna_array.py,

(*) Rename antenna related classes PolInfo, Antenna and AntennaArray 
with suffix old
(*) Start new class PolInfo holding antenna's polarized data with
basic docstring
(*) Write __init__() member function for class PolInfo with docstring

From daf42c2:
============

In antenna_array.py,

(*) Added more parallelization functionality in member function grid_convolve()
of class InterferoemterArray in the nearest neighbour lookup process. And this
has been tested to work successfully using interferometer_testing_MWA.py.

From dcba750:
============

In antenna_array.py,

(*) Strengthened parallelization functionality in member function 
grid_convolve() of class InterferometerArray.
(*) Added input parameter pp_method to specify the type of parallelization to
invoke in member function grid_convolve() of class InterferometerArray. 
Modified docstrings accordingly
(*) Adapted main programs interferometer_testing_LWA.py and 
interferometer_testing_MWA.py to take advantage of the parallelized modules.
They have been tested successfully

From 3335c88:
============

(*) Adapted main program interferometer_testing_LWA.py and tested. It was 
found to work successfully using the current modules.

From a5a819e:
============

(*) Changed input parameter in member function grid_convolve() of class 
InterferometerArray from weighting to mapping and its accepted values from
'natural' and 'uniform' to 'weighted' and 'sampled' respectively. The default
value of this input parameter was changed to 'weighted'. Made changes
accordingly in the main program interferometer_testing_MWA.py. 

(*) Tested these changes successfully on the main program 
interferometer_testing_MWA.py. The other main program 
interferometer_testing_LWA.py is not yet untested for these module changes.

(*) Modified the incomplete docstring of member function grid_convolve() of 
class InterferometerArray.   

From db629df:
============

(*) Verified a87d0bf is not a buggy version as previously thought and checked 
the modules function with expected behavior using interferometer_testing_MWA.py

In antenna_array.py,

(*) imported module matplotlib.pyplot to make plots
(*) in member function imagr() of class NewImage, apply fftshift to 2D fourier
transform only to axes 0 and 1 and not for the 3rd axes, namely, frequency.

From a87d0bf:
============

In antenna_array.py,

(*) Found a new bug where latitude is not an input parameter to update()
member function of class Interferometer. Since latitude of an interferometer 
is not expected to change during the course of an observation, the option to 
update the latitude of the interferometer has been removed. Still mysterious
how this bug crept in since the previous versions of the code worked without
crashing.
(*) Introduced parallel processing using the multiprocessing module in
member functions update_new() and FX_new() which otherwise have the same
functionality of member functions update() and FX() respectively in class
Interferometer. 

All the codes and modules are under testing

From 7ad4bee:
============

(*) Just committing the changelog file since it wasn't committed in the 
previous version. Code version is still not functional

From ed43e3a:
============

In antenna_array.py,

(*) Added a few statements related to multiprocessing. But the code does not work and it is not stable. Just committing in order to switch to different branches.

From 3280acf:
============

In antenna_array.py,

(*) in __init__() member function of class InterferometerArray, initialized 
attributes f, f0, and timestamp based on corresponding values in its
antenna_array attribute
(*) created a member function get_flags() for classes CrossPolInfo and
Interferometer to return flags of cross-polarizations
(*) created a member function interferometers_containing_antenna() for class
InterferometerArray to return labels of interferometers and the position (order)
of the antenna in each of those antenna pairs.
(*) created member functions FX() and XF() for classes Interferometer and
InterferometerArray
(*) Created member function t2f() and f2t() in class Interferometer to convert 
back and forth between timeseries and frequency spectrum
(*) Created more member functions, namely, __str__(), __add__(), __radd__(), 
__sub__(), add_interferometers(), remove_interferometers(), baseline_vectors(),
grid(), grid_convolve(), grid_unconvolve(), and update() for class
InterferometerArray
(*) In update() member function of class AntennaArray, update the attributes t 
and f
(*) Added an attribute grid_ready_P1 and grid_ready_P2 in __init__() member
function of class AntennaArray to indicate if gridding has already been performed
once. Changed docstring accordingly
(*) Attributes grid_ready_P1 and grid_ready_P2 are set to True in member function 
(*) In member function grid_convolve() of class AntennaArray, call the member 
function grid() to account for any updates that may have happened
(*) Added a key 'do_grid' inside key 'antenna_array' in input parameter updates
in member function update() of class AntennaArray
(*) Added a member function make_grid_cube() inside class InterferometerArray
to construct a grid cube of aperture illumination and visibilities
(*) Renamed grid_convolve() to grid_convolve_old() and wrote a new member 
function grid_convolve()
(*) Removed setting visibilities to NaN when the baseline is flagged
(*) Added an input parameter nsamples to __init__() member function of class
CrossPolInfo. Visibility time series and spectrum are initialized to NaN with
lengths equal to nsamples. Flags are initialized to True instead of False as was
done earlier.
(*) Attribute crosspol of class Interferometer is now initialized with input
parameter nsamples equal to number of frequency channels in the call to
__init__() member function of class CrossPolInfo
(*) Added input parameter nsamples to __init__() member function of class
PolInfo. Electric field time series and spectrum are initialized to NaN with
lengths equal to nsamples and 2*nsamples respectively. Flags are initialized to 
True instead of False as was done earlier.
(*) Attribute pol of class Antenna is now initialized with input parameter 
nsamples equal to number of time samples in the call to __init__() member 
function of class PolInfo
(*) flag assignment in member function update_flags() of class Interferometer
modified slightly
(*) Updated docstrings for classes CrossPolInfo, Interferometer, and 
InterferometerArray

From v1.06.2 of MOFF:
====================

In antenna_array.py,

(*) made small bug fixes in __str__() member function of class AntennaArray
(*) Created new classes CrossPolInfo, Interferometer and InterferometerArray
and tested their __init__() member functions while other member functions remain
to be tested
(*) Tested grid() member function in class InterferometerArray

From v1.06.1 of MOFF:
====================

Previous changelog should have mentioned variation from v1.06.1 instead of v1.06
above. Hence just amending the previous commit.

Created a branch lookup_patch to adjust the module to use the newer version of 
the module lookup_operations espcially in switching the usage from lookup() to
lookup_1NN()

In antenna_array.py,

(*) Replaced the calls to lookup() with lookup_1NN() and tested certain cases
with the MWA test script
(*) Added few comments inside member function update() of class AntennaArray
(*) Changed a dictionary key from 'antenna' to 'antennas' to avoid ambiguity with
another similarly named key in member function update() of class AntennaArray

---------------------------------------------------------------------------------
From v1.06 of MOFF:
==================

In antenna_array.py,

(*) Changed all occurrences of variable maxNN to maxmatch to indicate it denotes
maximum number of unique matches between the input locations and lookup table 
and not the number of nearest neighbors for each input location that needs to be
assigned. This is in line with the changes made in lookup_operations.py to
lookup() from v1.08. Changed docstring accordingly.

---------------------------------------------------------------------------------
From v1.05 of MOFF:
==================

In antenna_array.py,

(*) Although keyword maxNN was added in the previous version as an input to
member function grid_convolve(), while passing to lookup operation, it was 
hard-coded to maxNN=1. Now changed it to maxNN=maxNN so that the appropriate
value of maxNN may be passed.

---------------------------------------------------------------------------------
From v1.04 of MOFF:
==================

In antenna_array.py,

(*) Added keyword input maxNN to member functions grid_convolve() of class 
AntennaArray, and as one of the keys in the update dictionary inside update()
member function also of class AntennaArray

---------------------------------------------------------------------------------
From v1.03 of MOFF:
==================

In lookup_operations.py,

(*) in function lookup(), distNN was not initialized when remove_oob is False.
Now it is initialized.

Moved module lookup_operations.py from MOFF to general repository

In antenna_array.py,

(*) Normalized the holographic images by the sum of weights in each frequency
slice of the grid illumination pattern
(*) In member function temporal_F() of class PolInfo, use keyword inverse=False
to make it clear it is not inverse fourier transform
(*) Added a new member function delay_compensation() to class PolInfo that 
compensates for uncorrected delays by applying a phase correction to the
fourier transformed electric fields.
(*) Added input parameters delaydict_P1 and delaydict_P2 to member function
update() of class PolInfo and also a call to member function delay_compensation()
if delay compensation is to be applied. Updated docstring accordingly. 
(*) Added input parameters delaydict_P1 and delaydict_P2 to member function
update() of class Antenna and also in the call to member function update() of
object pol belonging to class PolInfo if delay compensation is to be applied.
Updated docstring accordingly. 
(*) Added input parameters delaydict_P1 and delaydict_P2 to member function
update() of class AntennaArray and also in the call to member function update() 
of object belonging to class Antenna if delay compensation is to be applied.
Updated docstring accordingly. 
(*) Added docstring to member function antenna_positions() of class 
AntennaArray which wasn't included earlier.
(*) Added to docstring of class AntennaArray the presence of member function
antenna_positions() which wasn't included earlier.
(*) In member function update() of class AntennaArray, included defaults (to 
None) for dictionary containing delay information. 
(*) In member function update() of class AntennaArray, earlier the attributes of
only the individual antenna instances were getting updated. Now modified it to
also update some of the attributes of AntennaArray instance such as timestamp.
This is done by making the input parameter 'updates' a dictionary with primary 
keys being 'antenna_array' and 'antenna'. The former is a dictionary consisting 
of updates to AntennaArray instance while the latter is a dictionary consisting
of a list of dictionaries one for each antenna instance to be updated. Changed
docstring accordingly.

---------------------------------------------------------------------------------
from v1.02 of MOFF:
==================

In antenna_array.py,

(*) Imported the lookup_operations module to handle lookup operations
(*) Modified input parameters to member function update() in class Antenna so 
that weight positions and weights can be passed as input parameters directly or
indirectly through a lookup table. The data type of input parameters wtsinfo_P1 
and wtsinfo_P2 have been changed from a list of tuples to a list of dictionaries.
(*) Changed docstring in member function update() of class AntennaArray to 
indicate that wtsinfo_P1 and wtsinfo_P2 are list of dictionaries rather than a
list of tuples as used before.
(*) Added a boolean input parameter named normalize in member function 
grid_convolve() of class AntennaArray, which if set to True will normalize the
gridded weights such that the sum of the gridded weights for each antenna will
equal unity. Otherwise, no such normalization is performed. Changed docstring of
member function grid_convolve() of class AntennaArray accordingly. 
(*) In member function update() of class AntennaArray, the dictionary consisting
of updates now includes a keyword named norm_wts which is a Boolean value that
indicates if normalizing of grid weights is to be performed inside
grid_convolve() when grid_action keyword is set when action keyword is set to 
'add' or 'modify'. Changed docstring of member function update() of class 
AntennaArray accordingly.
(*) Explicitly specified in all the relevant docstrings that wtspos, wtspos_P1,
and wtspos_P2 both as variables and attributes of class Antenna are in units of
number of wavelengths and remove any ambiguity that they could be in units of
physical distance
(*) Added an input parameter named method to member function grid_convolve() of
class AntennaArray which indicates the gridding method to be used. Accordingly
changed use of method from being restricted to 'CS' to whatever value is given
in method
(*) Added an input parameter named distNN to member function grid_convolve() of
class AntennaArray which indicates the upper bound to distance while searching
for nearest neighbours.
(*) Modified grid_convolve() member function of class AntennaArray to use 
nearest neaighbor or other interpolation strategies in applying the antenna 
weights to the grid. The nearest neighbor gridding makes use of the lookup
modules while other algorithms makes use of the gridding modules
(*) In member function update() of class AntennaArray, modified the call to its
member function grid_convolve() such that gridding method and distance upper
bound in case of nearest neighbor gridding are also passed.

In sim_observe.py,

(*) Made minor changes to docstrings in the description of input parameter antpos
in various functions.
(*) Modified stochastic_E_spectrum() to take advantage of numpy array
broadcasting
(*) Added a new input parameter ref_point to stochastic_E_spectrum() which 
denotes the phase reference on the sky
(*) Added a new input parameter ref_point to stochastic_E_timeseries() which 
denotes the phase reference on the sky and internal calling sequence to function
stochastic_E_spectrum() updated accordingly
(*) Inconsequentially changed internal variable names in both functions 
stochastic_E_spectrum() and stochastic_E_timeseries() to be consistent with
the implementation of numpy array broadcasting rules
(*) Added a new input parameter ref_point to monochromatic_E_spectrum() which 
denotes the phase reference on the sky
(*) Added a new input parameter ref_point to monochromatic_E_timeseries() which 
denotes the phase reference on the sky and internal calling sequence to function
monochromatic_E_spectrum() updated accordingly
(*) Added a new input parameter tshift (boolean) to stochastic_E_timeseries()
to indicate if phasing of the antennas is to be achieved by shifting of time bins
for different antennas. If not set to True, the phasing is achieved directly in
the frequency domain and transformed to time domain. If set to True, the time
series for each antenna is shifted by integral number of time bins that achieves
the closest amount of phase difference and the residual delay is returned which
can be applied later to the data in frequency domain.
(*) Body of stochastic_E_timeseries() modified to apply the phase reference 
either directly in the frequency domain or in time domain through delay bin
shifts and residual delay phase in frequency domain.
(*) Dictionary output of stochastic_E_timeseries() now contains a key named
'tres' which consists of residual delays (non-integral part) one per antenna.
(*) Dictionary output of stochastic_E_timeseries() now contains a key named
'tshift which consists of integral number of bins by which the the original 
timeseries of antennas have been shifted.
(*) In function stochastic_E_spectrum(), changed the sign convention of the 
complex exponent arising out of k(.)r such that an antenna at a negative 
location receives the signal after a lag while an antenna with a positive
location receives the signal in advance.
(*) In function monochromatic_E_spectrum(), changed the sign convention of the 
complex exponent arising out of k(.)r such that an antenna at a negative 
location receives the signal after a lag while an antenna with a positive
location receives the signal in advance.
(*) Corresponding to the change in sign convention, the member function imagr()
in class Image now uses FFT and FFT shifts instead of IFFT and IFFT shifts
to compute the images
(*) In monochromatic_E_spectrum(), added random phases from sources
(*) In monochromatic_E_spectrum(), modified few lines to take advantage of numpy
array broadcasting

(*) Created a new module named lookup_operations.py

In lookup_operations.py,

(*) Created functions gen_lookup(), read_lookup(), and lookup() to generate,
read, and perform nearest neighbour lookup respectively.

---------------------------------------------------------------------------------
from v1.01 of MOFF:
==================

In sim_observe.py,

(*) Created new function monochromatic_E_spectrum() and
monochromatic_E_timeseries() which produce a monochromatic electric field
spectrum and time-series respectively.

--------------------------------------------------------------------------------
from v1.0 of MOFF:
=================

In antenna_array.py, 

(*) Moved functions XC() and spectax() to the DSP module. Changed the module
prefix in the calling sequence accordingly
(*) Added attribute timestamp to Class AntennaArray
(*) Added method antenna_positions() in AntennaArray class to return a
dictionary containing antenna labels and a corresponding 3-column numpy array
of antenna locations either in random or sorted order based on the antenna
labels.
(*) Added a save() method in AntennaArray class to write contents of the
instance to disk
(*) Added a save() method in Antenna class to write contents of the instance
to disk
(*) In class method temporal_F() of class PolInfo, the time sequence is 
doubled in length by zero padding before the channelization using FFT
(*) In class method channels() of class Antenna, the frequency channels are now
computed with twice the length of time sequence and same time resolution to be
consistent with changes in temporal_F() method in class PolInfo.
(*) Added a new class Image to handle imaging data and associated operations.
(*) Class Image currently has the following member functions: __init__(), 
imagr() and save().
(*) __init__() of class Image can take in an instance of AntennaArray class or
a FITS file written by the save() method of AntennaArray class
(*) imagr() of class Image performs imaging operations on the antenna array 
grid information to produce a holographic image (complex, voltage)
(*) save() of class Image writes the image information to a FITS file on disk

Created a new module named sim_observe. 

(*) It consists of two functions, namely, stochastic_E_spectrum() and
stochastic_E_timeseries(). 
(*) stochastic_E_spectrum() computes random electric field spectra. Docstring
included.
(*) stochastic_E_timeseries() computes random electric field timeseries.
Docstring included.


--------------------------------------------------------------------------------
from v1.2 of python-trials:
==========================

In antenna_array.py, 

(*) member function F() replaced with temporal_F() in class
PolInfo does not return any values. Accordingly changed the calls to member
function in __init__(), and update().
(*) Renamed attribute pos in class Antenna, AntennaPair and AntennaArray to
location
(*) Introduced rotation matrix to convert from an individual antenna frame to 
local ENU coordinates in __init__() and update() in Antenna class
(*) Updated the call in Antenna class member function update() to PolInfo member
function update() 
(*) Added attribute 'latitude' to Antenna class
(*) Changed X and Y polarizations to P1 and P2 respectively to avoind confusion 
with x and y spatial coordinates
(*) Changed __init__() in PolInfo to different defaults
(*) Changed __init__() in Antenna to different defaults and added some data 
validation. 
(*) Added save method to class Antenna
(*) Changed gridding weights input type to Antenna class member function update.
(*) renamed spaxis() to spectax() and changed default of shift from True to 
False
(*) Making all time-series FFT shifted to have frequencies in sorted order by
setting shift=True
(*) Antenna class update() member function provides scaling, no scaling or 
explicit options for updating gridding information along frequency channels.
(*) AntennaArray class update() member function can add, remove, or update. The
updates should be provided as a list of dictionaries which will be passed to the
update() member function of individual antenna instances. 
(*) Verbose functionality added to update() member functions in Antenna and 
AntennaArray classes
(*) Added blc and trc attributes to Antenna class for antenna's grid occupation
in __init__() and their estimates in update() member function
(*) Renamed attributes ants_xmin_P1, grid_xmin_P1, etc. in terms of blc and trc
in AntennaArray class
(*) Added grid attributes for both polarizations
(*) Added polarization inputs to gridding methods
(*) Gridding occurs only based on unflagged antennas
(*) Information about individual antenna's influence on grid is stored in the 
form of a dictionary in the antenna's attributes gridinfo_P1 and gridinfo_P2
(*) Incremental gridding features added for addition, removal, and 
modifications of antennas
(*) Renamed function parameter 'spacing' in grid() to 'uvspacing'
(*) Added docstrings for all the functions and class member functions
(*) save() member functions in classes Antenna and AntennaArray need to be 
developed. 

Added a python script MOFF_testing.py for preliminary testing of modules 
developed for MOFF
